@page "/counter"
@using Microsoft.AspNetCore.Authorization
@using Rystem.Api.Test.Domain;
@attribute [Authorize]

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
@if (q2 != null)
{
    <div>@q.Id</div>
    <div>@q1</div>
    <div>@q2</div>
    @foreach (var player in q4)
    {
        <div>the player @player.Id</div>
    }
}

@code {
    [Inject]
    public IFactory<ISalubry> Factory { get; set; }
    [Inject]
    public IColam Colam { get; set; }
    [Inject]
    public ITeamCalculator TeamCalculator { get; set; }
    private EnrichedPlayer? q;
    private bool? q1;
    private bool? q2;
    private ChancedRealPlayerWrapper? q3;
    private List<EnrichedPlayer> q4 = new();
    protected override async Task OnInitializedAsync()
    {
        // var salubry = Factory.Create();
        // var response = await salubry.GetAsync(2, new MemoryStream());
        // var file = new HttpFile(new MemoryStream(), 0, 0, "a", "a");
        // file.ContentType = "application/pdf";
        // var response2 = await Colam.GetAsync("dasdsa", new MemoryStream(), "fol", "cul", "cookie", new Faul { Id = "a", Name = "a" }, new Faul { Id = "b", Name = "b" }, new MemoryStream());
        // file = new HttpFile(new MemoryStream(), 0, 0, "a", "a");
        // file.ContentType = "application/pdf";
        // var response3 = await Colam.GetAsync("dasdsa", file, "fol", "cul", "cookie");
        await base.OnInitializedAsync();
        // var q1 = TeamCalculator.Chance;
        q3 = TeamCalculator.Chance;
        TeamCalculator.SetLeagueSettings(new() { LeagueId = 45 });
        q = TeamCalculator.Enrich(new Player { Id = 4 });
        await TeamCalculator.BuildRequestAsync(1, 1, new LeagueSetting { LeagueId = 5 }, true, false, true);
        q1 = await TeamCalculator.BuildRequest2Async(1, 1, new LeagueSetting { LeagueId = 5 }, true, false, true, new());
        q2 = await TeamCalculator.BuildRequestValue2Async(1, 1, new LeagueSetting { LeagueId = 5 }, true, false, true);
        await TeamCalculator.BuildRequestValueAsync(1, 1, new LeagueSetting { LeagueId = 5 }, true, new(), false, true);
        await foreach (var player in TeamCalculator.GetRightFormationAsync(new List<EnrichedPlayer>
        {
            new EnrichedPlayer { Id=4 },
            new EnrichedPlayer { Id=5 },
            new EnrichedPlayer { Id=6 },
        }))
        {
            q4.Add(player);
        }
        var stream1 = TeamCalculator.GetFile("x");
        var stream2 = await TeamCalculator.GetFileAsync("x");
        var stream3 = TeamCalculator.GetHttpFile("x");
        var stream4 = await TeamCalculator.GetHttpFileAsync("x");
        // var q3 = TeamCalculator.CalculatePoint(new List<EnrichedPlayer> { new() { Id = 3 } });
    }
}