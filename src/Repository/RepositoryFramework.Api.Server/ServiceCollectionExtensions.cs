using Microsoft.Extensions.DependencyInjection.Extensions;
using System.Reflection;
using RepositoryFramework;
using Swashbuckle.AspNetCore.Filters;

namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class ServiceCollectionExtensions
    {
        /// <summary>
        /// Add api interfaces from repository framework. You can add configuration for Swagger, Identity in swagger and documentation.
        /// </summary>
        /// <param name="services">IServiceCollection</param>
        /// <returns>IServiceCollection</returns>
        public static IApiBuilder AddApiFromRepositoryFramework(this IServiceCollection services)
        {
            services
                .AddPopulationService();
            return new ApiBuilder(services);
        }
        /// <summary>
        /// Add examples for your repository or CQRS pattern based on your models.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="TKey"></typeparam>
        /// <param name="services"></param>
        /// <returns></returns>
        public static IServiceCollection AddRepositoryExample<T, TKey>(this IServiceCollection services)
        {
            services
                .TryAddSingleton<IExamplesProvider<T>, ExamplesProvider<T>>();
            services
                .TryAddSingleton<IExamplesProvider<TKey>, ExamplesProvider<TKey>>();
            return services;
        }
        /// <summary>
        /// Add random examples for your repository or CQRS pattern based on your models.
        /// </summary>
        /// <param name="services"></param>
        /// <returns></returns>
        public static IServiceCollection AddAutoGeneratedExamples(
            this IServiceCollection services, params Assembly[] assemblies)
        {
            List<Assembly> allAssemblies = new() { typeof(ServiceCollectionExtensions).Assembly };
            if (assemblies != null)
                allAssemblies.AddRange(assemblies);
            services.AddSwaggerExamplesFromAssemblies(allAssemblies.ToArray());
            services.TryAddSingleton(typeof(IExamplesProvider<>), typeof(ExamplesProvider<>));
            return services;
        }
    }
}
