@typeparam TUser where TUser : SocialUser, new()

@if (User != null)
{
    <CascadingValue Name="SocialUser" Value="User">
        <CascadingValue Name="LogoutCallback" Value="LogoutAsync">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
}
else if (Rendered)
{
    <SocialLogin></SocialLogin>
}
@code {
    [Parameter]
    public required RenderFragment ChildContent { get; set; }
    [Parameter]
    public SetUser<TUser>? SetUser { get; set; }
    private SocialUserWrapper<TUser>? User { get; set; }
    private bool Rendered { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (User == null && !Rendered)
        {
            var isAuthenticated = await Manager.FetchTokenAsync();
            if (isAuthenticated)
            {
                await LocalStorage.DeleteStateAsync();
            }
            if (isAuthenticated)
            {
                User = await Manager.MeAsync<TUser>();
                if (User != null)
                {
                    User.LogoutAsync = LogoutAsync;
                    if (SetUser != null)
                        await SetUser(User.User);
                    StateHasChanged();
                }
            }
        }
        if (!Rendered)
        {
            Rendered = true;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private async ValueTask LogoutAsync(bool forceReload)
    {
        await LocalStorage.DeleteTokenAsync();
        await LocalStorage.DeleteStateAsync();
        if (forceReload)
            NavigationManager.Refresh(true);
        else
        {
            User = null;
            StateHasChanged();
        }
    }
}
