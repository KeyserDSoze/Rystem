@namespace Rystem.Web.Components.Contents
@using System.Reflection;
@typeparam T

<table class="@_cssStyle">
    <thead>
        <tr>
            <th class="first-column">#</th>
            @foreach (var property in Showcase.FlatProperties)
            {
                <th>
                    <div class="row">
                        @if (property.Type != PropertyType.Enumerable)
                        {
                            <div class="col">
                                <button class="bg-transparent p-0 border-0 fw-bold w-100 text-start"
                                @onclick="@((x) => OrderBy(property))">
                                    @Translate(property.GetFurtherProperty().Title)
                                    <span class="material-symbols-outlined material-symbols-outlined-small float-end mt-1">
                                        @GetRightOrderingIcon(_columns[property.NavigationPath].Order)
                                    </span>
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="col">@Translate(property.GetFurtherProperty().Title)</div>
                        }
                    </div>
                </th>
            }
        </tr>
        <tr>
            <th class="first-column">

                <input type="checkbox" checked="@_allSelected" class="form-check-input mt-2" @onchange="@(args => AddOrRemoveItemFromListAllKeys(args, _items.Select(x => x.Key)))" />
            </th>
            @foreach (var property in Showcase.FlatProperties)
            {
                if (!property.NavigationPath.StartsWith(Constant.KeyWithSeparator) && property.NavigationPath != Constant.Key)
                {
                    <th>
                        @if (property.Type != PropertyType.Enumerable)
                        {
                            <QueryFilter SearchValue="_searchWrapper.Get(property)"
                             PropertyUiSettings="GetPropertySettings(property)" Search="@Search" />
                        }
                    </th>
                }
                else
                {
                    <th></th>
                }
            }
        </tr>
    </thead>
    <tbody>
        @if (_items != null)
        {
            foreach (var item in _items)
            {
                <tr>
                    <td class="first-column">
                        <button type="button" class="btn btn-primary btn-sm"
                        @onclick="@((x) => NavigateTo(GetEditUri(item.Key!)))">
                            <span class="material-symbols-outlined material-symbols-outlined-small">
                                edit
                            </span>
                        </button>
                        <input type="checkbox" class="form-check-input mt-2" checked="@_selectedKeys[item.Key]" value="@_selectedKeys[item.Key]" @onchange="@(args => AddOrRemoveItemFromList((bool)args.Value, item.Key))" />
                    </td>
                    @foreach (var property in Showcase.FlatProperties)
                    {
                        <td>
                            @if (property.Type != PropertyType.Enumerable)
                            {
                                <CopyButton GetValue="@(() => Translate(property.Value(item, null)?.ToString() ?? string.Empty))" />
                            }
                            else
                            {
                                <RadzenButton class="bg-transparent text-dark p-0"
                              Click="@((x) => ShowMoreValuesAsync(item, property))"
                              Text="@item.EnumerableCountAsString(property, LocalizationHandler)" />
                            }
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>