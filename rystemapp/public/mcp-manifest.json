{
  "name": "rystem-mcp",
  "version": "0.0.1",
  "description": "Rystem Framework Model Context Protocol - Tools, Resources, and Prompts for developers",
  "tools": [
    {
      "name": "auth-social-blazor",
      "path": "/mcp/tools/auth-social-blazor.md",
      "title": "Social Authentication - Blazor Client",
      "description": "Add Google, Microsoft, Facebook, GitHub social login buttons to your Blazor Server/WASM app with automatic token management and routing protection"
    },
    {
      "name": "auth-social-server",
      "path": "/mcp/tools/auth-social-server.md",
      "title": "Social Authentication - Server Setup",
      "description": "Configure Google, Microsoft, Facebook, GitHub, LinkedIn, X, Instagram, Pinterest social login with automatic token management and user provider integration for your REST API"
    },
    {
      "name": "auth-social-typescript",
      "path": "/mcp/tools/auth-social-typescript.md",
      "title": "Social Authentication - TypeScript/React Client",
      "description": "Add Google, Microsoft, Facebook, GitHub social login to your React/Vue/Angular app with automatic JWT token management and user context hooks"
    },
    {
      "name": "content-repository-blob",
      "path": "/mcp/tools/content-repository-blob.md",
      "title": "Content Repository - Azure Blob Storage",
      "description": "Store files in Azure Blob Storage with Content Repository - perfect for large files, CDN integration, and public access with metadata and tags support"
    },
    {
      "name": "content-repository-file",
      "path": "/mcp/tools/content-repository-file.md",
      "title": "Content Repository - Azure File Storage",
      "description": "Store files in Azure File Storage with Content Repository - perfect for SMB shares, legacy applications, and enterprise file sharing with metadata support"
    },
    {
      "name": "content-repository-inmemory",
      "path": "/mcp/tools/content-repository-inmemory.md",
      "title": "Content Repository - In-Memory Storage",
      "description": "Store files in memory with Content Repository - perfect for unit testing, caching, and development without external dependencies"
    },
    {
      "name": "content-repository-sharepoint",
      "path": "/mcp/tools/content-repository-sharepoint.md",
      "title": "Content Repository - SharePoint Online",
      "description": "Store files in SharePoint Online with Content Repository - perfect for document collaboration, Office 365 integration, and enterprise content management with metadata support"
    },
    {
      "name": "content-repository",
      "path": "/mcp/tools/content-repository.md",
      "title": "Content Repository Pattern",
      "description": "Unified interface for file storage across multiple providers - upload, download, delete files with metadata and tags support for Azure Blob Storage, Azure File Storage, SharePoint, and In-Memory storage"
    },
    {
      "name": "ddd-multi-domain",
      "path": "/mcp/tools/ddd-multi-domain.md",
      "title": "DDD Multi-Domain",
      "description": "Domain-Driven Design for enterprise applications with multiple bounded contexts - complete domain isolation, event-driven communication, and microservices support"
    },
    {
      "name": "ddd-single-domain",
      "path": "/mcp/tools/ddd-single-domain.md",
      "title": "DDD Single Domain",
      "description": "Domain-Driven Design for small applications with unified domain - flat structure with domains, business, infrastructures layers"
    },
    {
      "name": "install-rystem",
      "path": "/mcp/tools/install-rystem.md",
      "title": "Install Rystem Packages",
      "description": "Quick guide to install Rystem NuGet packages with correct versions - includes core packages, repository framework, authentication, and infrastructure components"
    },
    {
      "name": "repository-api-client-dotnet",
      "path": "/mcp/tools/repository-api-client-dotnet.md",
      "title": "Repository API Client - .NET",
      "description": "Consume Repository APIs from .NET/C# apps using same IRepository interface as backend - supports Blazor Server, Blazor WASM, MAUI, WPF, and Console apps"
    },
    {
      "name": "repository-api-client-typescript",
      "path": "/mcp/tools/repository-api-client-typescript.md",
      "title": "Repository API Client - TypeScript",
      "description": "Consume Repository APIs from TypeScript/JavaScript apps with type-safe access, automatic authentication, and retry logic for React, Next.js, and Node.js"
    },
    {
      "name": "repository-api-server",
      "path": "/mcp/tools/repository-api-server.md",
      "title": "Repository API Server",
      "description": "Auto-generate REST APIs from repositories without writing controllers - includes authentication, LINQ queries, and Swagger documentation"
    },
    {
      "name": "repository-setup",
      "path": "/mcp/tools/repository-setup.md",
      "title": "Repository Pattern Setup",
      "description": "Configure data access with Rystem.RepositoryFramework - CQRS, multiple storage backends, business logic injection, and Factory pattern support"
    },
    {
      "name": "rystem-async-lock",
      "path": "/mcp/tools/rystem-async-lock.md",
      "title": "Async Lock",
      "description": "Prevent race conditions in async code with key-based locking - execute async methods sequentially by resource ID, user ID, or any custom key with in-memory or Redis distributed locks"
    },
    {
      "name": "rystem-backgroundjob",
      "path": "/mcp/tools/rystem-backgroundjob.md",
      "title": "Background Jobs",
      "description": "Schedule recurring tasks with CRON expressions - run automated jobs, data sync, cleanup tasks, notifications, and periodic processing in your .NET application"
    },
    {
      "name": "rystem-concurrent-list",
      "path": "/mcp/tools/rystem-concurrent-list.md",
      "title": "ConcurrentList",
      "description": "Thread-safe List implementation with automatic locking for concurrent access - provides all List<T> operations with built-in concurrency control"
    },
    {
      "name": "rystem-csv",
      "path": "/mcp/tools/rystem-csv.md",
      "title": "CSV and Minimization",
      "description": "Serialize any IEnumerable to CSV with ToCsv() or use minimization for compact binary-like serialization with ToMinimize() and FromMinimization() - smaller than JSON with type safety"
    },
    {
      "name": "rystem-dependencyinjection-factory",
      "path": "/mcp/tools/rystem-dependencyinjection-factory.md",
      "title": "Dependency Injection Factory Pattern",
      "description": "Advanced factory pattern for Rystem.DependencyInjection - register multiple named services with AddFactory(), use IFactory<T> for runtime service resolution, decorators, fallbacks, and automatic assembly scanning"
    },
    {
      "name": "rystem-discriminated-union",
      "path": "/mcp/tools/rystem-discriminated-union.md",
      "title": "Discriminated Union with AnyOf",
      "description": "Implement type-safe discriminated unions in C# with AnyOf - supports up to 8 types, automatic JSON serialization/deserialization with intelligent type detection, pattern matching, and selector attributes"
    },
    {
      "name": "rystem-json-extensions",
      "path": "/mcp/tools/rystem-json-extensions.md",
      "title": "JSON Extensions",
      "description": "Simple JSON serialization and deserialization with ToJson() and FromJson<T>() - no more JsonSerializer.Serialize boilerplate"
    },
    {
      "name": "rystem-linq-serializer",
      "path": "/mcp/tools/rystem-linq-serializer.md",
      "title": "LINQ Expression Serializer",
      "description": "Serialize and deserialize LINQ expressions as strings - enables dynamic queries, expression storage in database, and runtime expression compilation with Serialize(), Deserialize(), and DeserializeAsDynamic()"
    },
    {
      "name": "rystem-queue",
      "path": "/mcp/tools/rystem-queue.md",
      "title": "In-Memory Queue",
      "description": "Buffer operations in-memory and process in batches - collect items until buffer size or time limit is reached, then execute batch processing with FIFO/LIFO support"
    },
    {
      "name": "rystem-race-condition",
      "path": "/mcp/tools/rystem-race-condition.md",
      "title": "Race Condition",
      "description": "Allow only the first request to execute within a time window - block duplicate operations with key-based race condition prevention for purchases, payments, submissions"
    },
    {
      "name": "rystem-reflection",
      "path": "/mcp/tools/rystem-reflection.md",
      "title": "Reflection Utilities",
      "description": "Advanced reflection helpers for C# - includes NameOfCallingClass(), FetchProperties() caching, IsTheSameTypeOrASon() type checking, CreateInstance() mocking for abstracts/interfaces, and IsNullable() for nullability detection"
    },
    {
      "name": "rystem-stopwatch",
      "path": "/mcp/tools/rystem-stopwatch.md",
      "title": "Stopwatch Utilities",
      "description": "Monitor execution time of methods, tasks, and actions with Rystem's Stopwatch helpers - includes Start/Stop, Monitor, and MonitorAsync with automatic time tracking"
    },
    {
      "name": "rystem-task-extensions",
      "path": "/mcp/tools/rystem-task-extensions.md",
      "title": "Task Extensions",
      "description": "Task utilities including NoContext() for ConfigureAwait(false), ToResult() for synchronous execution, and TaskManager for concurrent task execution with WhenAll() and WhenAtLeast()"
    },
    {
      "name": "rystem-text-extensions",
      "path": "/mcp/tools/rystem-text-extensions.md",
      "title": "Text Extensions",
      "description": "Fast text and stream utilities - includes ToByteArray(), ToStream(), ReadLinesAsync(), ToUpperCaseFirst(), ContainsAtLeast() for efficient string/byte/stream conversions"
    }
  ],
  "resources": [
    {
      "name": "background-jobs",
      "path": "/mcp/resources/background-jobs.md",
      "title": "Background Jobs",
      "description": "Configure background jobs for scheduled and recurring tasks with Rystem.BackgroundJob - supports cron expressions, async operations, and dependency injection"
    },
    {
      "name": "concurrency",
      "path": "/mcp/resources/concurrency.md",
      "title": "Concurrency Control",
      "description": "Implement distributed locks and prevent race conditions with Rystem.Concurrency - supports locks, semaphores, and Redis-based distributed coordination"
    },
    {
      "name": "content-repo",
      "path": "/mcp/resources/content-repo.md",
      "title": "Content Repository",
      "description": "Upload, download, and manage files with Rystem.Content - unified interface for Azure Blob Storage, File System, and SharePoint"
    }
  ],
  "prompts": [
    {
      "name": "auth-flow",
      "path": "/mcp/prompts/auth-flow.md",
      "title": "Authentication Flow Setup",
      "description": "Configure social authentication, JWT tokens, and role-based access control with Rystem.Authentication.Social - supports Google, Microsoft, GitHub, Facebook"
    },
    {
      "name": "code-review-rapiti",
      "path": "/mcp/prompts/code-review-rapiti.md",
      "title": "Code Review - Alessandro Rapiti Style",
      "description": "Comprehensive C# code review checklist following Alessandro Rapiti's standards for class design, naming conventions, performance optimization, and maintainability"
    },
    {
      "name": "project-setup-template-singledomain-classicrystem",
      "path": "/mcp/prompts/project-setup-template-singledomain-classicrystem.md",
      "title": "Project Setup Template - Standard Rystem",
      "description": "Pre-configured template with Single Domain, NoSQL (Azure Blob), Social Authentication, React + MUI, and Azure deployment"
    },
    {
      "name": "project-setup-template",
      "path": "/mcp/prompts/project-setup-template.md",
      "title": "Project Setup Template - Generic",
      "description": "Ready-to-use template for new Rystem applications - fill in your choices and get a complete project structure"
    },
    {
      "name": "project-setup",
      "path": "/mcp/prompts/project-setup.md",
      "title": "Application Setup with Rystem",
      "description": "Interactive prompt to create complete applications with .NET API backend and React/Next.js frontend following Domain-Driven Design and FUD.md approach"
    },
    {
      "name": "service-setup",
      "path": "/mcp/prompts/service-setup.md",
      "title": "Service Setup with Dependency Injection",
      "description": "Configure services with Rystem's advanced dependency injection - includes Factory pattern, named services, and service lifetime management"
    }
  ]
}