{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Rystem.Api.Client/","text":"Rystem.Api.Client Library Documentation API Client Classes Class: ApiClientChainRequest This class is responsible for managing a group of ApiClientCreateRequestMethod objects. Properties: Methods : A key-value dictionary where the key is a string and values are objects of type ApiClientCreateRequestMethod . This property holds all API methods for a particular client. Class: ApiClientCreateRequestMethod This class helps in the creation of methods for an API client. Properties: IsPost : A boolean that indicates whether the API method is a POST or not. FixedPath : A string representing the API path to complement the base URL. Parameters : None ResultStreamType : A StreamType object that defines what type of stream the API result should be converted into. ReturnType : A Type object specifying the return type of the method. Parameters : A list of ApiClientCreateRequestParameterMethod objects specifying the parameters to pass to the API method. Class: ApiClientCreateRequestParameterMethod This class is used for creating parameters for API methods. Properties: Name : A string representing the name of the parameter. Executor : An action delegate that defines how to execute this method and format its parameters. Class: ApiClientRequestBearer This class is used to construct and manage HTTP requests. Properties: Path : A StringBuilder that represents the API path to complement the base URL. Query : A StringBuilder used to append query parameters to the API request URL. Cookie : A StringBuilder used to build cookie headers for the API request. Content : An HttpContent object which holds the body of the request. Headers : A Dictionary where the key and value are both a string. This property holds all headers for the API request. Class: ApiHttpClient This class is a dispatch proxy used to create a proxy of the specified type T. It's responsible for calling HTTP methods synchronously or asynchronously. Properties: Not all properties are listed here, just the primary members of the class. _httpClient : An instance of HttpClient used to send HTTP requests and receive HTTP responses from a resource identified by a URI. Invoke method This method is called when the object of this class is invoked. Depending on the calling method's signature, it calls other methods to execute HTTP requests. Method Name: Invoke Parameters: MethodInfo? method: Method info for the method to be invoked. object?[]? args: Array of objects that specifies the method arguments. Return Value: Returns an object of any type which is the response of the HTTP request or null . Usage Example: Not directly used as it's a protected method of the class which is automatically called when the API client calls a method. InvokeHttpRequestAsync<TResponse> method This method is made to send a HTTP request asynchronously and handles the HTTP response depending on the response type and whether the response should be read or not. Method Name: InvokeHttpRequestAsync Parameters: ApiClientCreateRequestMethod currentMethod: Object of the method that has to be invoked. object?[]? args: Array of objects that specifies the method arguments. bool readResponse: A boolean that determines whether to read HTTP response or not. Type returnType: Specifies the return type of the method. CancellationToken cancellationToken: Propagates notification that operations should be cancelled. Return Value: Returns a ValueTask<TResponse> which eventually gives the HTTP response (if read) or null . Usage Example: Not directly used as it's a private method of the class. Class: HttpClientBuilder This class is used to configure HTTP clients for different API endpoints. Methods: ConfigurationHttpClientForEndpointApi<T> method This method is used for the configuration of the HttpClient specifically for an endpoint based on the type of the endpoint. Method Name: ConfigurationHttpClientForEndpointApi Parameters: Action ? settings: An action that represents the HttpClient settings that are specific to this endpoint. Return Value: Returns an object of type HttpClientBuilder which can further be used for the configuration information. Usage Example: var builder = new HttpClientBuilder(); builder.ConfigurationHttpClientForEndpointApi<UserApi>(client => { /* client settings */ }); ConfigurationHttpClientForApi method This method provides a default setting for HTTP clients with no specific endpoint settings defined. Method Name: ConfigurationHttpClientForApi Parameters: Action ? settings: An action that represents the HttpClient settings applicable for all endpoints that don't have their own specific settings. Return Value: Returns an object of type HttpClientBuilder which can further be used for the configuration information. Usage Example: var builder = new HttpClientBuilder(); builder.ConfigurationHttpClientForApi(client => { /* default client settings */ }); Class: RystemApiServiceCollectionExtensions This extension class provides ways to configure Rystem for a specific endpoint and all endpoints. Methods: AddEnhancerForAllEndpoints<TEnhancer> method This method is used to add an IRequestEnhancer for all possible endpoints. Method Name: AddEnhancerForAllEndpoints Parameters: None Return Value: This method returns an instance of IServiceCollection which can be used for further configuration. Usage Example: services.AddEnhancerForAllEndpoints<MyRequestEnhancer>(); AddEnhancerForEndpoint<TEnhancer, T> method This method is used add an IRequestEnhancer for a specific endpoint. Method Name: AddEnhancerForEndpoint Parameters: None Return Value: This method returns an instance of IServiceCollection which can be used for further configuration. Usage Example: services.AddEnhancerForEndpoint<MyRequestEnhancer, UserApi>(); Test Classes: No test classes are provided. The provided code focuses on setting up an API client with various extensions and wrappers for easy usage and configuration. The anatomy and behavior of the components mirror common behavior in many industry-standard API clients, allowing developers familiar with such clients to quickly understand the provided classes.","title":"Rystem.Api.Client"},{"location":"Rystem.Api.Client/#rystemapiclient-library-documentation","text":"","title":"Rystem.Api.Client Library Documentation"},{"location":"Rystem.Api.Client/#api-client-classes","text":"","title":"API Client Classes"},{"location":"Rystem.Api.Client/#class-apiclientchainrequest","text":"This class is responsible for managing a group of ApiClientCreateRequestMethod objects.","title":"Class: ApiClientChainRequest"},{"location":"Rystem.Api.Client/#properties","text":"Methods : A key-value dictionary where the key is a string and values are objects of type ApiClientCreateRequestMethod . This property holds all API methods for a particular client.","title":"Properties:"},{"location":"Rystem.Api.Client/#class-apiclientcreaterequestmethod","text":"This class helps in the creation of methods for an API client.","title":"Class: ApiClientCreateRequestMethod"},{"location":"Rystem.Api.Client/#properties_1","text":"IsPost : A boolean that indicates whether the API method is a POST or not. FixedPath : A string representing the API path to complement the base URL. Parameters : None ResultStreamType : A StreamType object that defines what type of stream the API result should be converted into. ReturnType : A Type object specifying the return type of the method. Parameters : A list of ApiClientCreateRequestParameterMethod objects specifying the parameters to pass to the API method.","title":"Properties:"},{"location":"Rystem.Api.Client/#class-apiclientcreaterequestparametermethod","text":"This class is used for creating parameters for API methods.","title":"Class: ApiClientCreateRequestParameterMethod"},{"location":"Rystem.Api.Client/#properties_2","text":"Name : A string representing the name of the parameter. Executor : An action delegate that defines how to execute this method and format its parameters.","title":"Properties:"},{"location":"Rystem.Api.Client/#class-apiclientrequestbearer","text":"This class is used to construct and manage HTTP requests.","title":"Class: ApiClientRequestBearer"},{"location":"Rystem.Api.Client/#properties_3","text":"Path : A StringBuilder that represents the API path to complement the base URL. Query : A StringBuilder used to append query parameters to the API request URL. Cookie : A StringBuilder used to build cookie headers for the API request. Content : An HttpContent object which holds the body of the request. Headers : A Dictionary where the key and value are both a string. This property holds all headers for the API request.","title":"Properties:"},{"location":"Rystem.Api.Client/#class-apihttpclient","text":"This class is a dispatch proxy used to create a proxy of the specified type T. It's responsible for calling HTTP methods synchronously or asynchronously.","title":"Class: ApiHttpClient"},{"location":"Rystem.Api.Client/#properties_4","text":"Not all properties are listed here, just the primary members of the class. _httpClient : An instance of HttpClient used to send HTTP requests and receive HTTP responses from a resource identified by a URI. Invoke method This method is called when the object of this class is invoked. Depending on the calling method's signature, it calls other methods to execute HTTP requests. Method Name: Invoke Parameters: MethodInfo? method: Method info for the method to be invoked. object?[]? args: Array of objects that specifies the method arguments. Return Value: Returns an object of any type which is the response of the HTTP request or null . Usage Example: Not directly used as it's a protected method of the class which is automatically called when the API client calls a method. InvokeHttpRequestAsync<TResponse> method This method is made to send a HTTP request asynchronously and handles the HTTP response depending on the response type and whether the response should be read or not. Method Name: InvokeHttpRequestAsync Parameters: ApiClientCreateRequestMethod currentMethod: Object of the method that has to be invoked. object?[]? args: Array of objects that specifies the method arguments. bool readResponse: A boolean that determines whether to read HTTP response or not. Type returnType: Specifies the return type of the method. CancellationToken cancellationToken: Propagates notification that operations should be cancelled. Return Value: Returns a ValueTask<TResponse> which eventually gives the HTTP response (if read) or null . Usage Example: Not directly used as it's a private method of the class.","title":"Properties:"},{"location":"Rystem.Api.Client/#class-httpclientbuilder","text":"This class is used to configure HTTP clients for different API endpoints.","title":"Class: HttpClientBuilder"},{"location":"Rystem.Api.Client/#methods","text":"ConfigurationHttpClientForEndpointApi<T> method This method is used for the configuration of the HttpClient specifically for an endpoint based on the type of the endpoint. Method Name: ConfigurationHttpClientForEndpointApi Parameters: Action ? settings: An action that represents the HttpClient settings that are specific to this endpoint. Return Value: Returns an object of type HttpClientBuilder which can further be used for the configuration information. Usage Example: var builder = new HttpClientBuilder(); builder.ConfigurationHttpClientForEndpointApi<UserApi>(client => { /* client settings */ }); ConfigurationHttpClientForApi method This method provides a default setting for HTTP clients with no specific endpoint settings defined. Method Name: ConfigurationHttpClientForApi Parameters: Action ? settings: An action that represents the HttpClient settings applicable for all endpoints that don't have their own specific settings. Return Value: Returns an object of type HttpClientBuilder which can further be used for the configuration information. Usage Example: var builder = new HttpClientBuilder(); builder.ConfigurationHttpClientForApi(client => { /* default client settings */ });","title":"Methods:"},{"location":"Rystem.Api.Client/#class-rystemapiservicecollectionextensions","text":"This extension class provides ways to configure Rystem for a specific endpoint and all endpoints.","title":"Class: RystemApiServiceCollectionExtensions"},{"location":"Rystem.Api.Client/#methods_1","text":"AddEnhancerForAllEndpoints<TEnhancer> method This method is used to add an IRequestEnhancer for all possible endpoints. Method Name: AddEnhancerForAllEndpoints Parameters: None Return Value: This method returns an instance of IServiceCollection which can be used for further configuration. Usage Example: services.AddEnhancerForAllEndpoints<MyRequestEnhancer>(); AddEnhancerForEndpoint<TEnhancer, T> method This method is used add an IRequestEnhancer for a specific endpoint. Method Name: AddEnhancerForEndpoint Parameters: None Return Value: This method returns an instance of IServiceCollection which can be used for further configuration. Usage Example: services.AddEnhancerForEndpoint<MyRequestEnhancer, UserApi>();","title":"Methods:"},{"location":"Rystem.Api.Client/#test-classes","text":"No test classes are provided. The provided code focuses on setting up an API client with various extensions and wrappers for easy usage and configuration. The anatomy and behavior of the components mirror common behavior in many industry-standard API clients, allowing developers familiar with such clients to quickly understand the provided classes.","title":"Test Classes:"},{"location":"Rystem.Api.Server/","text":"Class Documentation This library is built on a few different technologies which include Rystem.Api, Microsoft.AspNetCore.OpenApi, and Swashbuckle.AspNetCore as a Nuget package. Primarily, it allows users to automatically add multiple functionalities, such as Swagger and API endpoint routing, to their service collection. There are two static classes available for extension purpose: 1. ServiceCollectionExtensions This class provides static methods for IServiceCollection to add server integrations. Method AddServerIntegrationForRystemApi This method integrates the Rystem API into the current service collection. Parameters: IServiceCollection services : The current instance of services being bound. Return Value: IServiceCollection : Returns the service collection with Rystem API integration. Usage Example: services.AddServerIntegrationForRystemApi(); 2. EndpointRouteBuilderRystemExtensions This class contains methods extending the functionality of the IEndpointRouteBuilder . Method UseEndpointApi This method creates endpoints for the API. Parameters: IEndpointRouteBuilder builder : The route builder with defined parameters. Return Value: IEndpointRouteBuilder : Returns the route builder with added endpoints. Usage Example: app.UseEndpointApi(); Method UseEndpointApiModels This function creates API models for the given programming languages. Parameters: IEndpointRouteBuilder builder : The instance of the endpoint route builder. Return Value: None. This method does not return a value. Usage Example: app.UseEndpointApiModels(); This method iterates through all the endpoints, grabs the Types related, and generates a map route that contains the models for each Programming Language outlined in the list. More about possible private methods used and other specific workflow routes can be found in the source code for more advanced usage. Test Classes: ||| The tests for these methods can be found in the integration tests of the Rystem API. This includes checking if the endpoints are created successfully for each programming language specified in the Languages list and if the code compiles successfully in their respective languages. The tests would involve creating service collections, adding the server integration, and checking for successful integration. Possible edge cases to test could include how to handle invalid programming languages, overloading the API server with multiple routes, and providing invalid routes.","title":"Rystem.Api.Server"},{"location":"Rystem.Api.Server/#class-documentation","text":"This library is built on a few different technologies which include Rystem.Api, Microsoft.AspNetCore.OpenApi, and Swashbuckle.AspNetCore as a Nuget package. Primarily, it allows users to automatically add multiple functionalities, such as Swagger and API endpoint routing, to their service collection. There are two static classes available for extension purpose:","title":"Class Documentation"},{"location":"Rystem.Api.Server/#1-servicecollectionextensions","text":"This class provides static methods for IServiceCollection to add server integrations.","title":"1. ServiceCollectionExtensions"},{"location":"Rystem.Api.Server/#method-addserverintegrationforrystemapi","text":"This method integrates the Rystem API into the current service collection.","title":"Method AddServerIntegrationForRystemApi"},{"location":"Rystem.Api.Server/#parameters","text":"IServiceCollection services : The current instance of services being bound.","title":"Parameters:"},{"location":"Rystem.Api.Server/#return-value","text":"IServiceCollection : Returns the service collection with Rystem API integration.","title":"Return Value:"},{"location":"Rystem.Api.Server/#usage-example","text":"services.AddServerIntegrationForRystemApi();","title":"Usage Example:"},{"location":"Rystem.Api.Server/#2-endpointroutebuilderrystemextensions","text":"This class contains methods extending the functionality of the IEndpointRouteBuilder .","title":"2. EndpointRouteBuilderRystemExtensions"},{"location":"Rystem.Api.Server/#method-useendpointapi","text":"This method creates endpoints for the API.","title":"Method UseEndpointApi"},{"location":"Rystem.Api.Server/#parameters_1","text":"IEndpointRouteBuilder builder : The route builder with defined parameters.","title":"Parameters:"},{"location":"Rystem.Api.Server/#return-value_1","text":"IEndpointRouteBuilder : Returns the route builder with added endpoints.","title":"Return Value:"},{"location":"Rystem.Api.Server/#usage-example_1","text":"app.UseEndpointApi();","title":"Usage Example:"},{"location":"Rystem.Api.Server/#method-useendpointapimodels","text":"This function creates API models for the given programming languages.","title":"Method UseEndpointApiModels"},{"location":"Rystem.Api.Server/#parameters_2","text":"IEndpointRouteBuilder builder : The instance of the endpoint route builder.","title":"Parameters:"},{"location":"Rystem.Api.Server/#return-value_2","text":"None. This method does not return a value.","title":"Return Value:"},{"location":"Rystem.Api.Server/#usage-example_2","text":"app.UseEndpointApiModels(); This method iterates through all the endpoints, grabs the Types related, and generates a map route that contains the models for each Programming Language outlined in the list. More about possible private methods used and other specific workflow routes can be found in the source code for more advanced usage.","title":"Usage Example:"},{"location":"Rystem.Api.Server/#test-classes","text":"||| The tests for these methods can be found in the integration tests of the Rystem API. This includes checking if the endpoints are created successfully for each programming language specified in the Languages list and if the code compiles successfully in their respective languages. The tests would involve creating service collections, adding the server integration, and checking for successful integration. Possible edge cases to test could include how to handle invalid programming languages, overloading the API server with multiple routes, and providing invalid routes.","title":"Test Classes:"},{"location":"Rystem.Api/","text":"DOCUMENTATION ServiceCollectionExtensions Class ClassName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions Method: ConfigureEndpoints() Method Name: ConfigureEndpoints() Purpose : This function helps configure the endpoints of services and adds the endpointsManager as a singleton to the services collection. Parameters : IServiceCollection services : The service collection to which the endpoints need to be added. Action<EndpointsManager> configurator : The action that consists of the configuration logic for the endpoints. Return Value : The function returns an IServiceCollection that includes the singleton service added. Usage : services.ConfigureEndpoints(configurator => { // configuration logic }); Method: AddEndpoint Purpose : This function is used to add a certain endpoint to the service collection. Parameters : IServiceCollection services : The service collection to which the endpoints need to be added. Action<ApiEndpointBuilder<TService>> builder : This action represents the building logic for the endpoint to be added. string? name : An optional parameter that represents the name of the factory. Return Value : It returns an IServiceCollection after adding the specified endpoint. Usage : services.AddEndpoint<IService>(builder => { // build logic }, \"name\"); ApiEndpointBuilder Class ClassName: Microsoft.AspNetCore.Builder.ApiEndpointBuilder It is a class that provides various methods to customize the API Endpoint as per requirements. Method: SetEndpointName() Purpose : This method allows you to set a name for the endpoint. Parameters : string name : The name to be assigned to the endpoint. Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.SetEndpointName(\"newName\"); Method: SetMethodName() Purpose : This method allows you to set a name for the method. Parameters : string name : The name to be assigned to the method. It has two version, one takes Expression<Func<T, Delegate>> method as a parameter, and the other takes MethodInfo methodInfo . Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.SetMethodName(//method or MethodInfo, \"newMethodName\"); Method: Remove() Purpose : This method allows you to remove a method. Parameters : It has two versions, one takes string methodName as a parameter, and the other takes MethodInfo methodInfo as a parameter. Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.Remove(//method or MethodInfo); Method: AddAuthorization() Purpose : This method allows you to add authorization to the method. Parameters : Expression<Func<T, Delegate>> method : method expression for a delegate. params string[] policies : policy expression. Return Value : This method returns an instance of the ApiEndpointBuilder with authorization added to the method. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.AddAuthorization(//method, \"policy1\", \"policy2\"); Method: SetupParameter() Purpose : This method allows you to set up a parameter. Parameters : string parameterName : the name of the parameter. Action<EndpointMethodParameterValue> setup : action to set the parameter value. Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.SetupParameter(//method or MethodInfo, \"paramName\", //an action); For other methods, the usage is similar. Note: It's suggested that the developer have an intermediate understanding of C# action and func delegates to handle the Action or Func objects being used in these methods. Also, the developers are assumed to have a basic understanding of the ASP.dotnet core environment to use these classes and methods.","title":"Rystem.Api"},{"location":"Rystem.Api/#documentation","text":"","title":"DOCUMENTATION"},{"location":"Rystem.Api/#servicecollectionextensions-class","text":"","title":"ServiceCollectionExtensions Class"},{"location":"Rystem.Api/#classname-microsoftextensionsdependencyinjectionservicecollectionextensions","text":"","title":"ClassName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions"},{"location":"Rystem.Api/#method-configureendpoints","text":"","title":"Method: ConfigureEndpoints()"},{"location":"Rystem.Api/#method-name-configureendpoints","text":"Purpose : This function helps configure the endpoints of services and adds the endpointsManager as a singleton to the services collection. Parameters : IServiceCollection services : The service collection to which the endpoints need to be added. Action<EndpointsManager> configurator : The action that consists of the configuration logic for the endpoints. Return Value : The function returns an IServiceCollection that includes the singleton service added. Usage : services.ConfigureEndpoints(configurator => { // configuration logic });","title":"Method Name: ConfigureEndpoints()"},{"location":"Rystem.Api/#method-addendpoint","text":"Purpose : This function is used to add a certain endpoint to the service collection. Parameters : IServiceCollection services : The service collection to which the endpoints need to be added. Action<ApiEndpointBuilder<TService>> builder : This action represents the building logic for the endpoint to be added. string? name : An optional parameter that represents the name of the factory. Return Value : It returns an IServiceCollection after adding the specified endpoint. Usage : services.AddEndpoint<IService>(builder => { // build logic }, \"name\");","title":"Method: AddEndpoint"},{"location":"Rystem.Api/#apiendpointbuilder-class","text":"","title":"ApiEndpointBuilder Class"},{"location":"Rystem.Api/#classname-microsoftaspnetcorebuilderapiendpointbuilder","text":"It is a class that provides various methods to customize the API Endpoint as per requirements.","title":"ClassName: Microsoft.AspNetCore.Builder.ApiEndpointBuilder"},{"location":"Rystem.Api/#method-setendpointname","text":"Purpose : This method allows you to set a name for the endpoint. Parameters : string name : The name to be assigned to the endpoint. Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.SetEndpointName(\"newName\");","title":"Method: SetEndpointName()"},{"location":"Rystem.Api/#method-setmethodname","text":"Purpose : This method allows you to set a name for the method. Parameters : string name : The name to be assigned to the method. It has two version, one takes Expression<Func<T, Delegate>> method as a parameter, and the other takes MethodInfo methodInfo . Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.SetMethodName(//method or MethodInfo, \"newMethodName\");","title":"Method: SetMethodName()"},{"location":"Rystem.Api/#method-remove","text":"Purpose : This method allows you to remove a method. Parameters : It has two versions, one takes string methodName as a parameter, and the other takes MethodInfo methodInfo as a parameter. Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.Remove(//method or MethodInfo);","title":"Method: Remove()"},{"location":"Rystem.Api/#method-addauthorization","text":"Purpose : This method allows you to add authorization to the method. Parameters : Expression<Func<T, Delegate>> method : method expression for a delegate. params string[] policies : policy expression. Return Value : This method returns an instance of the ApiEndpointBuilder with authorization added to the method. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.AddAuthorization(//method, \"policy1\", \"policy2\");","title":"Method: AddAuthorization()"},{"location":"Rystem.Api/#method-setupparameter","text":"Purpose : This method allows you to set up a parameter. Parameters : string parameterName : the name of the parameter. Action<EndpointMethodParameterValue> setup : action to set the parameter value. Return Value : This method returns an instance of the ApiEndpointBuilder. Usage Example : var builder = new ApiEndpointBuilder<T>(); builder.SetupParameter(//method or MethodInfo, \"paramName\", //an action); For other methods, the usage is similar. Note: It's suggested that the developer have an intermediate understanding of C# action and func delegates to handle the Action or Func objects being used in these methods. Also, the developers are assumed to have a basic understanding of the ASP.dotnet core environment to use these classes and methods.","title":"Method: SetupParameter()"},{"location":"Rystem.Authentication.Social.Abstractions/","text":"Rystem.Authentication.Social.Abstractions This NuGet package provides utility for social authentication and includes the following class: TokenResponse . Dependencies The package requires the following libraries: - Google.Apis.Auth (minimum version: 1.68.0) - Microsoft.IdentityModel.Protocols.OpenIdConnect (minimum version: 8.1.2) - Microsoft.IdentityModel.Tokens (minimum version: 8.1.2) - System.IdentityModel.Tokens.Jwt (minimum version: 8.1.2) - Rystem.DependencyInjection (minimum version: 6.2.0) Classes TokenResponse This class represents a token response from the social authentication process. Properties: Username : Contains the unique string identifier (username) of a user. Type : string Usage : This property is used to identify a user in your application. csharp var tokenResponse = new TokenResponse(); tokenResponse.Username = \"user1\"; Claims : Contains user claims obtained during the authentication process. Type : List<Claim> Usage : This property is used to store user claims that can be used in your application for access control or personalization. csharp var tokenResponse = new TokenResponse(); tokenResponse.Claims = new List<Claim>{new Claim(\"Role\", \"Admin\")}; Static Properties: Empty : Represents an empty or non-existent TokenResponse object. Type : TokenResponse Usage : This property can be used to represent the absence of a valid token response. csharp var tokenResponse = TokenResponse.Empty; This class does not have any public methods. This class can be used to extract identity information from the user's social account after they've been authenticated. It encapsulates the response for easy consumption within your application. Please use the documented properties to manipulate and access this response.","title":"Rystem.Authentication.Social.Abstractions"},{"location":"Rystem.Authentication.Social.Abstractions/#rystemauthenticationsocialabstractions","text":"This NuGet package provides utility for social authentication and includes the following class: TokenResponse .","title":"Rystem.Authentication.Social.Abstractions"},{"location":"Rystem.Authentication.Social.Abstractions/#dependencies","text":"The package requires the following libraries: - Google.Apis.Auth (minimum version: 1.68.0) - Microsoft.IdentityModel.Protocols.OpenIdConnect (minimum version: 8.1.2) - Microsoft.IdentityModel.Tokens (minimum version: 8.1.2) - System.IdentityModel.Tokens.Jwt (minimum version: 8.1.2) - Rystem.DependencyInjection (minimum version: 6.2.0)","title":"Dependencies"},{"location":"Rystem.Authentication.Social.Abstractions/#classes","text":"","title":"Classes"},{"location":"Rystem.Authentication.Social.Abstractions/#tokenresponse","text":"This class represents a token response from the social authentication process.","title":"TokenResponse"},{"location":"Rystem.Authentication.Social.Abstractions/#properties","text":"Username : Contains the unique string identifier (username) of a user. Type : string Usage : This property is used to identify a user in your application. csharp var tokenResponse = new TokenResponse(); tokenResponse.Username = \"user1\"; Claims : Contains user claims obtained during the authentication process. Type : List<Claim> Usage : This property is used to store user claims that can be used in your application for access control or personalization. csharp var tokenResponse = new TokenResponse(); tokenResponse.Claims = new List<Claim>{new Claim(\"Role\", \"Admin\")};","title":"Properties:"},{"location":"Rystem.Authentication.Social.Abstractions/#static-properties","text":"Empty : Represents an empty or non-existent TokenResponse object. Type : TokenResponse Usage : This property can be used to represent the absence of a valid token response. csharp var tokenResponse = TokenResponse.Empty; This class does not have any public methods. This class can be used to extract identity information from the user's social account after they've been authenticated. It encapsulates the response for easy consumption within your application. Please use the documented properties to manipulate and access this response.","title":"Static Properties:"},{"location":"Rystem.Authentication.Social/","text":"","title":"Rystem.Authentication.Social"},{"location":"Rystem.Concurrency/","text":"In the namespace System.Threading.Concurrent , we have three classes: LockResponse, MemoryLock, and RaceConditionResponse. Below is the documentation for each class and its methods: LockResponse Class: Method Name: LockResponse() Description : This is the constructor of the LockResponse class. It initializes the properties of LockResponse. Parameters : - executionTime (TimeSpan) - The total time span it took to execute the given function. - exceptions (IList ) - List of any exceptions that occurred during the execution. Return Value : No return value as this is a constructor method. Properties: ExecutionTime - Readonly TimeSpan property for execution time Exceptions - Readonly property for Any Exceptions during Execution. The type of this property is AggregateException and can be null. InException - Readonly boolean property to check if there are any exceptions. This is a derived property which checks if Exceptions property is not null. Usage Example: var exceptions = new List<Exception>(){ new Exception()}; var response = new LockResponse(TimeSpan.FromSeconds(2), exceptions); RaceConditionResponse Class: Method Name: RaceConditionResponse() Description : This is the constructor of the RaceConditionResponse class. It initializes the properties of RaceConditionResponse. Parameters : - IsExecuted (bool) - Boolean indicating whether the operation was executed. - exceptions (IList ) - List of any exceptions that occured during the execution. Return Value : No return value as this is a constructor method. Properties: IsExecuted - Readonly Boolean property to indicate if the operation is Executed. Exceptions - Readonly property for Any Exceptions during Execution. The type of this property is AggregateException and can be null. InException - Readonly boolean property to check if there are any exceptions. This is a derived property which checks if Exceptions property is not null. Usage Example: var exceptions = new List<Exception>(){ new Exception()}; var response = new RaceConditionResponse(true, exceptions); MemoryLock Class: Method Name: AcquireAsync() Description : This method tries to acquire a lock for the provided key. Parameters : - key (string) - The key for which to acquire the lock. - maxWindow (TimeSpan?, nullable) - The maximum time window for which the lock can exist. Return Value : This method returns boolean wrapped inside a Task indicating whether the lock was acquired. Method Name: IsAcquiredAsync() Description : This method checks if a lock is acquired for the provided key. Parameters : - key (string) - The key for which to check the lock. Return Value : Returns a boolean wrapped inside a Task indicating whether the lock is acquired for the provided key. Method Name: ReleaseAsync() Description : This method releases the lock for the provided key. Parameters : - key (string) - The key for which to release the lock. Return Value : Returns a boolean wrapped inside a Task indicating whether the lock was released. Usage Example: var memLock = new MemoryLock(); var isAcquired = await memLock.AcquireAsync(\"test\"); var keyExists = await memLock.IsAcquiredAsync(\"test\"); var isReleased = await memLock.ReleaseAsync(\"test\"); In the namespace Microsoft.Extensions.DependencyInjection , we have extension methods to add above concurrency classes to ServiceCollection for Dependency Injection. Depending on the project need, you can add the required class to your services collection as shown below: var services = new ServiceCollection(); services.AddLockExecutor(); //to add LockExecutor to services services.AddLock(); //to add LockExecutor and MemoryLock to services services.AddInMemoryLockable(); //to add MemoryLock to services services.AddRaceCondition(); // to add RaceCondition related services This library also offers ways to integrate with custom implementations of interfaces ILock, ILockable and IRaceCondition. The provided class must implement the respective interface. This can be done using the corresponding genric Add methods as shown below: public class CustomLock: ILock { //implementation } services.AddLockExecutor<CustomLock>(); public class CustomLockable: ILockable { //implementation } services.AddLockableIntegration<CustomLockable>(); public class CustomRaceCondition: IRaceCondition { //implementation } services.AddRaceConditionExecutor<CustomRaceCondition>();","title":"Rystem.Concurrency"},{"location":"Rystem.Concurrency/#lockresponse-class","text":"","title":"LockResponse Class:"},{"location":"Rystem.Concurrency/#method-name-lockresponse","text":"Description : This is the constructor of the LockResponse class. It initializes the properties of LockResponse. Parameters : - executionTime (TimeSpan) - The total time span it took to execute the given function. - exceptions (IList ) - List of any exceptions that occurred during the execution. Return Value : No return value as this is a constructor method.","title":"Method Name: LockResponse()"},{"location":"Rystem.Concurrency/#properties","text":"ExecutionTime - Readonly TimeSpan property for execution time Exceptions - Readonly property for Any Exceptions during Execution. The type of this property is AggregateException and can be null. InException - Readonly boolean property to check if there are any exceptions. This is a derived property which checks if Exceptions property is not null.","title":"Properties:"},{"location":"Rystem.Concurrency/#usage-example","text":"var exceptions = new List<Exception>(){ new Exception()}; var response = new LockResponse(TimeSpan.FromSeconds(2), exceptions);","title":"Usage Example:"},{"location":"Rystem.Concurrency/#raceconditionresponse-class","text":"","title":"RaceConditionResponse Class:"},{"location":"Rystem.Concurrency/#method-name-raceconditionresponse","text":"Description : This is the constructor of the RaceConditionResponse class. It initializes the properties of RaceConditionResponse. Parameters : - IsExecuted (bool) - Boolean indicating whether the operation was executed. - exceptions (IList ) - List of any exceptions that occured during the execution. Return Value : No return value as this is a constructor method.","title":"Method Name: RaceConditionResponse()"},{"location":"Rystem.Concurrency/#properties_1","text":"IsExecuted - Readonly Boolean property to indicate if the operation is Executed. Exceptions - Readonly property for Any Exceptions during Execution. The type of this property is AggregateException and can be null. InException - Readonly boolean property to check if there are any exceptions. This is a derived property which checks if Exceptions property is not null.","title":"Properties:"},{"location":"Rystem.Concurrency/#usage-example_1","text":"var exceptions = new List<Exception>(){ new Exception()}; var response = new RaceConditionResponse(true, exceptions);","title":"Usage Example:"},{"location":"Rystem.Concurrency/#memorylock-class","text":"","title":"MemoryLock Class:"},{"location":"Rystem.Concurrency/#method-name-acquireasync","text":"Description : This method tries to acquire a lock for the provided key. Parameters : - key (string) - The key for which to acquire the lock. - maxWindow (TimeSpan?, nullable) - The maximum time window for which the lock can exist. Return Value : This method returns boolean wrapped inside a Task indicating whether the lock was acquired.","title":"Method Name: AcquireAsync()"},{"location":"Rystem.Concurrency/#method-name-isacquiredasync","text":"Description : This method checks if a lock is acquired for the provided key. Parameters : - key (string) - The key for which to check the lock. Return Value : Returns a boolean wrapped inside a Task indicating whether the lock is acquired for the provided key.","title":"Method Name: IsAcquiredAsync()"},{"location":"Rystem.Concurrency/#method-name-releaseasync","text":"Description : This method releases the lock for the provided key. Parameters : - key (string) - The key for which to release the lock. Return Value : Returns a boolean wrapped inside a Task indicating whether the lock was released.","title":"Method Name: ReleaseAsync()"},{"location":"Rystem.Concurrency/#usage-example_2","text":"var memLock = new MemoryLock(); var isAcquired = await memLock.AcquireAsync(\"test\"); var keyExists = await memLock.IsAcquiredAsync(\"test\"); var isReleased = await memLock.ReleaseAsync(\"test\"); In the namespace Microsoft.Extensions.DependencyInjection , we have extension methods to add above concurrency classes to ServiceCollection for Dependency Injection. Depending on the project need, you can add the required class to your services collection as shown below: var services = new ServiceCollection(); services.AddLockExecutor(); //to add LockExecutor to services services.AddLock(); //to add LockExecutor and MemoryLock to services services.AddInMemoryLockable(); //to add MemoryLock to services services.AddRaceCondition(); // to add RaceCondition related services This library also offers ways to integrate with custom implementations of interfaces ILock, ILockable and IRaceCondition. The provided class must implement the respective interface. This can be done using the corresponding genric Add methods as shown below: public class CustomLock: ILock { //implementation } services.AddLockExecutor<CustomLock>(); public class CustomLockable: ILockable { //implementation } services.AddLockableIntegration<CustomLockable>(); public class CustomRaceCondition: IRaceCondition { //implementation } services.AddRaceConditionExecutor<CustomRaceCondition>();","title":"Usage Example:"},{"location":"Rystem.Content.Abstractions/","text":"Rystem.Content.Abstractions Documentation Class: ContentMigrationExceptionResult This class handles the outcome of a failed migration in the content system, containing the exception information that arose and the path of the migration. Properties: 1. Exception - Type : Exception - Description : Contains the exception that resulted from a failed migration. 2. Path - Type : ContentMigrationPath - Description : Contains the migration path for which the exception was thrown. Class: ContentMigrationPath This class denotes a migration path in the content system, including source and destination. It also includes a method to check if the source and destination are the same. Properties: 1. From - Type : string - Description : The source of the migration path. 2. To - Type : string - Description : The destination of the migration path. 3. IsTheSame - Type : bool - Description : A checker method conditional to return true if \"From\" and \"To\" are equal which means the source and destination are the same. Class: ContentMigrationResult This class compiles the results of content migration, including paths that were migrated, those not migrated, blocked by predicate paths, and paths not migrated due to errors. Properties: 1. MigratedPaths - Type: List<ContentMigrationPath> - Description: List of migration paths that were migrated successfully. 2. NotMigratedPaths - Type: List<ContentMigrationPath> - Description: List of migration paths that were not migrated. 3. NotContentPaths - Type: List<ContentMigrationPath> - Description: List of paths that were not considered to be content and thus did not migrate. 4. BlockedByPredicatePaths - Type: List<ContentMigrationPath> - Description: List of migration paths that were blocked by a predicate and thus did not migrate. 5. NotMigratedPathsForErrors - Type: List<ContentMigrationExceptionResult> - Description: List of failed migrations due to exceptions. Class: ContentMigrationSettings This class contains various settings that control the behaviour of the migration process during content migration. Properties: 1. Prefix - Type: string - Description: The prefix applied to migration paths. 2. Predicate - Type: Func<ContentRepositoryDownloadResult, bool> - Description: A function to filter out paths from migration. If the function returns true for a given path, it will be included in the migration; otherwise, it will be excluded. 3. OnErrorContinue - Type: bool - Description: If set to true, the migration process will continue even if an error is encountered. Default value is true. 4. OverwriteIfExists - Type: bool - Description: If set to true, existing content at the destination path will be overwritten if the same content is being migrated. 5. ModifyDestinationPath - Type: Func<string, string> - Description: A function to modify the destination path for a given source path when migrating content. Class: ServiceCollectionExtensions This class includes extension methods for the IServiceCollection class. Methods: 1. AddContentRepository - Description: This method configures content repository services and registers them to the provided IServiceCollection. - Parameters: - IServiceCollection services: An instance of IServiceCollection to which the content repository services will be added. - Returns: IContentRepositoryBuilder object that is used to configure content repository. - Usage Example: ```markdown var services = new ServiceCollection(); services.AddContentRepository(); ``` For the remaining classes, the properties serve to encapsulate various details of the content repository, download results, response headers, etc., and do not have notable behaviors needing to be explained. With these classes, you can manage content, handle requests and responses in content operations, set up necessary options regarding caching, encoding, languages, etc., and generally manage all data traffic related to content operations.","title":"Rystem.Content.Abstractions"},{"location":"Rystem.Content.Abstractions/#rystemcontentabstractions-documentation","text":"","title":"Rystem.Content.Abstractions Documentation"},{"location":"Rystem.Content.Abstractions/#class-contentmigrationexceptionresult","text":"This class handles the outcome of a failed migration in the content system, containing the exception information that arose and the path of the migration.","title":"Class: ContentMigrationExceptionResult"},{"location":"Rystem.Content.Abstractions/#properties","text":"1. Exception - Type : Exception - Description : Contains the exception that resulted from a failed migration. 2. Path - Type : ContentMigrationPath - Description : Contains the migration path for which the exception was thrown.","title":"Properties:"},{"location":"Rystem.Content.Abstractions/#class-contentmigrationpath","text":"This class denotes a migration path in the content system, including source and destination. It also includes a method to check if the source and destination are the same.","title":"Class: ContentMigrationPath"},{"location":"Rystem.Content.Abstractions/#properties_1","text":"1. From - Type : string - Description : The source of the migration path. 2. To - Type : string - Description : The destination of the migration path. 3. IsTheSame - Type : bool - Description : A checker method conditional to return true if \"From\" and \"To\" are equal which means the source and destination are the same.","title":"Properties:"},{"location":"Rystem.Content.Abstractions/#class-contentmigrationresult","text":"This class compiles the results of content migration, including paths that were migrated, those not migrated, blocked by predicate paths, and paths not migrated due to errors.","title":"Class: ContentMigrationResult"},{"location":"Rystem.Content.Abstractions/#properties_2","text":"1. MigratedPaths - Type: List<ContentMigrationPath> - Description: List of migration paths that were migrated successfully. 2. NotMigratedPaths - Type: List<ContentMigrationPath> - Description: List of migration paths that were not migrated. 3. NotContentPaths - Type: List<ContentMigrationPath> - Description: List of paths that were not considered to be content and thus did not migrate. 4. BlockedByPredicatePaths - Type: List<ContentMigrationPath> - Description: List of migration paths that were blocked by a predicate and thus did not migrate. 5. NotMigratedPathsForErrors - Type: List<ContentMigrationExceptionResult> - Description: List of failed migrations due to exceptions.","title":"Properties:"},{"location":"Rystem.Content.Abstractions/#class-contentmigrationsettings","text":"This class contains various settings that control the behaviour of the migration process during content migration.","title":"Class: ContentMigrationSettings"},{"location":"Rystem.Content.Abstractions/#properties_3","text":"1. Prefix - Type: string - Description: The prefix applied to migration paths. 2. Predicate - Type: Func<ContentRepositoryDownloadResult, bool> - Description: A function to filter out paths from migration. If the function returns true for a given path, it will be included in the migration; otherwise, it will be excluded. 3. OnErrorContinue - Type: bool - Description: If set to true, the migration process will continue even if an error is encountered. Default value is true. 4. OverwriteIfExists - Type: bool - Description: If set to true, existing content at the destination path will be overwritten if the same content is being migrated. 5. ModifyDestinationPath - Type: Func<string, string> - Description: A function to modify the destination path for a given source path when migrating content.","title":"Properties:"},{"location":"Rystem.Content.Abstractions/#class-servicecollectionextensions","text":"This class includes extension methods for the IServiceCollection class.","title":"Class: ServiceCollectionExtensions"},{"location":"Rystem.Content.Abstractions/#methods","text":"1. AddContentRepository - Description: This method configures content repository services and registers them to the provided IServiceCollection. - Parameters: - IServiceCollection services: An instance of IServiceCollection to which the content repository services will be added. - Returns: IContentRepositoryBuilder object that is used to configure content repository. - Usage Example: ```markdown var services = new ServiceCollection(); services.AddContentRepository(); ``` For the remaining classes, the properties serve to encapsulate various details of the content repository, download results, response headers, etc., and do not have notable behaviors needing to be explained. With these classes, you can manage content, handle requests and responses in content operations, set up necessary options regarding caching, encoding, languages, etc., and generally manage all data traffic related to content operations.","title":"Methods:"},{"location":"Rystem.DependencyInjection.Web/","text":"Documentation Class: FallbackBuilderForServiceCollection Namespace: Microsoft.Extensions.DependencyInjection This class is responsible for managing fallbacks in the dependency injection process. It provides the ability to add back-up mechanisms when a service cannot be resolved during dependency injection. Properties ServiceColletionBuilder : Type is Action<IServiceCollection> . This property sets an action that adds fallback services to the service collection. If not specified, the default action will not add any services. ServiceProvider : Type is IServiceProvider . This property provides an existing instance of the service provider. It is used internally for initializing the class. Name : Type is string? . This property sets a name for the fallback builder. Class: ServiceCollectionExtensions Namespace: Microsoft.Extensions.DependencyInjection This static class extends the IServiceCollection with additional helper methods for managing the services dependency injection process. Methods AddActionAsFallbackWithServiceCollectionRebuilding Method Purpose : This method allows adding an action as a fallback mechanism during the dependency injection resolution process. Parameters : - services : Type is IServiceCollection . This represents the Microsoft.Extensions.DependencyInjection.IServiceCollection extended by this helper method. - fallbackBuilder : Type is Func<FallbackBuilderForServiceCollection, ValueTask> . This is a function that takes a FallbackBuilderForServiceCollection instance as input and returns a ValueTask . The function is responsible for defining the fallback behavior. Return Value : - Returns IServiceCollection to allow method chaining. Usage Example : services.AddActionAsFallbackWithServiceCollectionRebuilding<T>(async fallbackBuilder => { // Configure fallback action }); 2. AddActionAsFallbackWithServiceCollectionRebuilding Method Purpose : This method is a variant of the method above and allows specifying a service type at run-time. Parameters : - services : Type is IServiceCollection . This represents the Microsoft.Extensions.DependencyInjection.IServiceCollection extended by this helper method. - serviceType : Type is Type . This represents the type of the service class to be extended. - fallbackBuilder : Type is Func<FallbackBuilderForServiceCollection, ValueTask> . This is a function that takes a FallbackBuilderForServiceCollection instance as input and returns a ValueTask . The function is responsible for defining the fallback behavior. Return Value : - Returns IServiceCollection to allow method chaining. Usage Example : services.AddActionAsFallbackWithServiceCollectionRebuilding(serviceType, async fallbackBuilder => { // Configure fallback action });","title":"Rystem.DependencyInjection.Web"},{"location":"Rystem.DependencyInjection.Web/#documentation","text":"","title":"Documentation"},{"location":"Rystem.DependencyInjection.Web/#class-fallbackbuilderforservicecollection","text":"Namespace: Microsoft.Extensions.DependencyInjection This class is responsible for managing fallbacks in the dependency injection process. It provides the ability to add back-up mechanisms when a service cannot be resolved during dependency injection. Properties ServiceColletionBuilder : Type is Action<IServiceCollection> . This property sets an action that adds fallback services to the service collection. If not specified, the default action will not add any services. ServiceProvider : Type is IServiceProvider . This property provides an existing instance of the service provider. It is used internally for initializing the class. Name : Type is string? . This property sets a name for the fallback builder.","title":"Class: FallbackBuilderForServiceCollection"},{"location":"Rystem.DependencyInjection.Web/#class-servicecollectionextensions","text":"Namespace: Microsoft.Extensions.DependencyInjection This static class extends the IServiceCollection with additional helper methods for managing the services dependency injection process. Methods AddActionAsFallbackWithServiceCollectionRebuilding Method Purpose : This method allows adding an action as a fallback mechanism during the dependency injection resolution process. Parameters : - services : Type is IServiceCollection . This represents the Microsoft.Extensions.DependencyInjection.IServiceCollection extended by this helper method. - fallbackBuilder : Type is Func<FallbackBuilderForServiceCollection, ValueTask> . This is a function that takes a FallbackBuilderForServiceCollection instance as input and returns a ValueTask . The function is responsible for defining the fallback behavior. Return Value : - Returns IServiceCollection to allow method chaining. Usage Example : services.AddActionAsFallbackWithServiceCollectionRebuilding<T>(async fallbackBuilder => { // Configure fallback action }); 2. AddActionAsFallbackWithServiceCollectionRebuilding Method Purpose : This method is a variant of the method above and allows specifying a service type at run-time. Parameters : - services : Type is IServiceCollection . This represents the Microsoft.Extensions.DependencyInjection.IServiceCollection extended by this helper method. - serviceType : Type is Type . This represents the type of the service class to be extended. - fallbackBuilder : Type is Func<FallbackBuilderForServiceCollection, ValueTask> . This is a function that takes a FallbackBuilderForServiceCollection instance as input and returns a ValueTask . The function is responsible for defining the fallback behavior. Return Value : - Returns IServiceCollection to allow method chaining. Usage Example : services.AddActionAsFallbackWithServiceCollectionRebuilding(serviceType, async fallbackBuilder => { // Configure fallback action });","title":"Class: ServiceCollectionExtensions"},{"location":"Rystem/Rystem.Reflection/","text":"Documentation: ReflectionHelper Class in Rystem.Reflection Namespace The Rystem.Reflection namespace contains helper methods related to Reflection in .NET. One of the classes found within this namespace is ReflectionHelper . This static class contains a method to fetch the class name for a given stack frame at a specified depth. Method Details NameOfCallingClass Method Method Name : NameOfCallingClass Description : Determines the name of the class that invoked a method. It does so by examining the method execution's stack trace. The search starts from the given depth and continues upwards until a class name is found that is not from the core mscorlib.dll . Parameters : - int deep : The initial depth from which the search for the calling class begins. Default value is 1. - bool full : Flag defining whether to return the full name of the class (with namespace) or just the class name. For true , it returns the full class name including namespace. For false (default value), it returns just the class name. Return Value : string name of the calling class. If no calling class is found, the method returns the name of the method at the examined stack depth. Usage Example : string className = ReflectionHelper.NameOfCallingClass(2, true); Console.WriteLine(className); // Outputs the full name of the class that is two frames up in the stack. This method is helpful when you want to identify the class that called a particular operation, especially useful in logging or debugging scenarios. The ability to control the depth allows flexibility in terms of call stack examination. Including the invoking class name in your application logs can give you a clearer picture of the execution flow and help speed up the troubleshooting process. As such, NameOfCallingClass might be frequently used within your exception handling or logging infrastructure. Remember that, due to potential performance implications, use reflection judiciously and only when required. Always validate the stack depth you pass to avoid potential StackOverflowExceptions or arguments outside the stack trace range.","title":"Rystem.Reflection"},{"location":"Rystem/Rystem.Reflection/#documentation-reflectionhelper-class-in-rystemreflection-namespace","text":"The Rystem.Reflection namespace contains helper methods related to Reflection in .NET. One of the classes found within this namespace is ReflectionHelper . This static class contains a method to fetch the class name for a given stack frame at a specified depth.","title":"Documentation: ReflectionHelper Class in Rystem.Reflection Namespace"},{"location":"Rystem/Rystem.Reflection/#method-details","text":"","title":"Method Details"},{"location":"Rystem/Rystem.Reflection/#nameofcallingclass-method","text":"Method Name : NameOfCallingClass Description : Determines the name of the class that invoked a method. It does so by examining the method execution's stack trace. The search starts from the given depth and continues upwards until a class name is found that is not from the core mscorlib.dll . Parameters : - int deep : The initial depth from which the search for the calling class begins. Default value is 1. - bool full : Flag defining whether to return the full name of the class (with namespace) or just the class name. For true , it returns the full class name including namespace. For false (default value), it returns just the class name. Return Value : string name of the calling class. If no calling class is found, the method returns the name of the method at the examined stack depth. Usage Example : string className = ReflectionHelper.NameOfCallingClass(2, true); Console.WriteLine(className); // Outputs the full name of the class that is two frames up in the stack. This method is helpful when you want to identify the class that called a particular operation, especially useful in logging or debugging scenarios. The ability to control the depth allows flexibility in terms of call stack examination. Including the invoking class name in your application logs can give you a clearer picture of the execution flow and help speed up the troubleshooting process. As such, NameOfCallingClass might be frequently used within your exception handling or logging infrastructure. Remember that, due to potential performance implications, use reflection judiciously and only when required. Always validate the stack depth you pass to avoid potential StackOverflowExceptions or arguments outside the stack trace range.","title":"NameOfCallingClass Method"},{"location":"Rystem/System.Collection.Generics/","text":"Rystem NuGet Package - System.Collection.Generics Namespace Documentation Class: AsyncEnumerable This class is a part of the System.Collection.Generics namespace in the Rystem libraries, and is responsible for handling the creation of async enumerables. Method: Empty Method Name: Empty Description : This is a predefined readonly property that creates an empty IAsyncEnumerable<T> . Parameters : This method does not accept any parameters. Return Value : This method returns an IAsyncEnumerable<T> that is empty. Type T is the type of elements in the enumerable. Usage Example: Given that this property returns an empty IAsyncEnumerable , it can be used when we need to return an empty version of a list in an asynchronous operation, which may be useful when no data is available to populate the list. However, this is a static property so while demonstrating the usage, we would just show accessing this property, like so: var emptyAsyncList = AsyncEnumerable<string>.Empty; Method: GetEmpty Method Name: GetEmpty Description : This method is a private async enumerator function that was specifically created to initialize the Empty property. Parameters : This method does not accept any parameters. Return Value : This is a private method that doesn't return anything directly. Instead, it initializes the Empty property with an empty IAsyncEnumerable<T> . Usage Example: Since this is a private method, it typically wouldn't be used directly by the end user. The purpose of this method is to create an empty enumerable for the above Empty method.","title":"System.Collection.Generics"},{"location":"Rystem/System.Collection.Generics/#rystem-nuget-package-systemcollectiongenerics-namespace-documentation","text":"","title":"Rystem NuGet Package - System.Collection.Generics Namespace Documentation"},{"location":"Rystem/System.Collection.Generics/#class-asyncenumerable","text":"This class is a part of the System.Collection.Generics namespace in the Rystem libraries, and is responsible for handling the creation of async enumerables.","title":"Class: AsyncEnumerable"},{"location":"Rystem/System.Collection.Generics/#method-empty","text":"Method Name: Empty Description : This is a predefined readonly property that creates an empty IAsyncEnumerable<T> . Parameters : This method does not accept any parameters. Return Value : This method returns an IAsyncEnumerable<T> that is empty. Type T is the type of elements in the enumerable. Usage Example: Given that this property returns an empty IAsyncEnumerable , it can be used when we need to return an empty version of a list in an asynchronous operation, which may be useful when no data is available to populate the list. However, this is a static property so while demonstrating the usage, we would just show accessing this property, like so: var emptyAsyncList = AsyncEnumerable<string>.Empty;","title":"Method: Empty"},{"location":"Rystem/System.Collection.Generics/#method-getempty","text":"Method Name: GetEmpty Description : This method is a private async enumerator function that was specifically created to initialize the Empty property. Parameters : This method does not accept any parameters. Return Value : This is a private method that doesn't return anything directly. Instead, it initializes the Empty property with an empty IAsyncEnumerable<T> . Usage Example: Since this is a private method, it typically wouldn't be used directly by the end user. The purpose of this method is to create an empty enumerable for the above Empty method.","title":"Method: GetEmpty"},{"location":"Rystem/System.Collections.Concurrent/","text":"ConcurrentList<T> Class The ConcurrentList<T> is a thread-safe implementation of the IList<T> interface. This class wraps all actions on the underlying list, with each method locking on the _trafficLight object to avoid race conditions and maintain thread safety. Add(T item) Method Purpose : Adds an item to the ConcurrentList<T> . Parameters : - T item : The item of type T that should be added to the list. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(); concurrentList.Add(5); Clear() Method Purpose : Removes all items from the ConcurrentList<T> . Parameters : This method doesn't need any parameters. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(); concurrentList.Add(5); concurrentList.Clear(); Contains(T item) Method Purpose : Determines whether the ConcurrentList<T> contains a specific item. Parameters : - T item : The item to locate in the ConcurrentList<T> . Return Value : A boolean value indicating whether the item is found in the ConcurrentList<T> . Usage Example : var concurrentList = new ConcurrentList<int>(); concurrentList.Add(5); bool contains = concurrentList.Contains(5); // true CopyTo(T[] array, int arrayIndex) Method Purpose : Copies the elements of the ConcurrentList<T> to an array, starting at a specific array index. Parameters : - T[] array : The one-dimensional array that is the destination of the elements copied from ConcurrentList<T> . - int arrayIndex : The zero-based index in array at which copying begins. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; var targetArray = new int[5]; concurrentList.CopyTo(targetArray, 0); GetEnumerator() Method Purpose : Returns an enumerator that iterates through the ConcurrentList<T> . Parameters : This method doesn't need any parameters. Return Value : An IEnumerator<T> that can be used to iterate through the collection. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; var enumerator = concurrentList.GetEnumerator(); while(enumerator.MoveNext()){ Console.WriteLine(enumerator.Current); } IndexOf(T item) Method Purpose : Determines the index of a specific item in the ConcurrentList<T> . Parameters : - T item : The object to locate in the ConcurrentList<T> . Return Value : The index of item if found in the list; otherwise, -1. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; int index = concurrentList.IndexOf(3); // 2 Insert(int index, T item) Method Purpose : Inserts an item to the ConcurrentList<T> at the specified index. Parameters : - int index : The zero-based index at which item should be inserted. - T item : The object to insert into the ConcurrentList<T> . Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; concurrentList.Insert(0, 0); // 0, 1, 2, 3, 4, 5 Remove(T item) Method Purpose : Removes the first occurrence of a specific object from the ConcurrentList<T> . Parameters : - T item : The object to remove from the ConcurrentList<T> . Return Value : A boolean value indicating if the operation was successful. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; bool isRemoved = concurrentList.Remove(3); // true if 3 was successfully removed RemoveAt(int index) Method Purpose : Removes the ConcurrentList<T> element at the specified index. Parameters : - int index : The zero-based index of the element to remove. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; concurrentList.RemoveAt(2); // Removes 3 from the list Using the test cases provided, it's clear to see how these methods are used to safely manipulate and manage data concurrently, avoiding potential issues with regular Lists and arrays in a multi-threaded environment.","title":"System.Collections.Concurrent"},{"location":"Rystem/System.Collections.Concurrent/#concurrentlistt-class","text":"The ConcurrentList<T> is a thread-safe implementation of the IList<T> interface. This class wraps all actions on the underlying list, with each method locking on the _trafficLight object to avoid race conditions and maintain thread safety.","title":"ConcurrentList&lt;T&gt; Class"},{"location":"Rystem/System.Collections.Concurrent/#addt-item-method","text":"Purpose : Adds an item to the ConcurrentList<T> . Parameters : - T item : The item of type T that should be added to the list. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(); concurrentList.Add(5);","title":"Add(T item) Method"},{"location":"Rystem/System.Collections.Concurrent/#clear-method","text":"Purpose : Removes all items from the ConcurrentList<T> . Parameters : This method doesn't need any parameters. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(); concurrentList.Add(5); concurrentList.Clear();","title":"Clear() Method"},{"location":"Rystem/System.Collections.Concurrent/#containst-item-method","text":"Purpose : Determines whether the ConcurrentList<T> contains a specific item. Parameters : - T item : The item to locate in the ConcurrentList<T> . Return Value : A boolean value indicating whether the item is found in the ConcurrentList<T> . Usage Example : var concurrentList = new ConcurrentList<int>(); concurrentList.Add(5); bool contains = concurrentList.Contains(5); // true","title":"Contains(T item) Method"},{"location":"Rystem/System.Collections.Concurrent/#copytot-array-int-arrayindex-method","text":"Purpose : Copies the elements of the ConcurrentList<T> to an array, starting at a specific array index. Parameters : - T[] array : The one-dimensional array that is the destination of the elements copied from ConcurrentList<T> . - int arrayIndex : The zero-based index in array at which copying begins. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; var targetArray = new int[5]; concurrentList.CopyTo(targetArray, 0);","title":"CopyTo(T[] array, int arrayIndex) Method"},{"location":"Rystem/System.Collections.Concurrent/#getenumerator-method","text":"Purpose : Returns an enumerator that iterates through the ConcurrentList<T> . Parameters : This method doesn't need any parameters. Return Value : An IEnumerator<T> that can be used to iterate through the collection. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; var enumerator = concurrentList.GetEnumerator(); while(enumerator.MoveNext()){ Console.WriteLine(enumerator.Current); }","title":"GetEnumerator() Method"},{"location":"Rystem/System.Collections.Concurrent/#indexoft-item-method","text":"Purpose : Determines the index of a specific item in the ConcurrentList<T> . Parameters : - T item : The object to locate in the ConcurrentList<T> . Return Value : The index of item if found in the list; otherwise, -1. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; int index = concurrentList.IndexOf(3); // 2","title":"IndexOf(T item) Method"},{"location":"Rystem/System.Collections.Concurrent/#insertint-index-t-item-method","text":"Purpose : Inserts an item to the ConcurrentList<T> at the specified index. Parameters : - int index : The zero-based index at which item should be inserted. - T item : The object to insert into the ConcurrentList<T> . Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; concurrentList.Insert(0, 0); // 0, 1, 2, 3, 4, 5","title":"Insert(int index, T item) Method"},{"location":"Rystem/System.Collections.Concurrent/#removet-item-method","text":"Purpose : Removes the first occurrence of a specific object from the ConcurrentList<T> . Parameters : - T item : The object to remove from the ConcurrentList<T> . Return Value : A boolean value indicating if the operation was successful. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; bool isRemoved = concurrentList.Remove(3); // true if 3 was successfully removed","title":"Remove(T item) Method"},{"location":"Rystem/System.Collections.Concurrent/#removeatint-index-method","text":"Purpose : Removes the ConcurrentList<T> element at the specified index. Parameters : - int index : The zero-based index of the element to remove. Return Value : This method doesn't return a value. Usage Example : var concurrentList = new ConcurrentList<int>(){1, 2, 3, 4, 5}; concurrentList.RemoveAt(2); // Removes 3 from the list Using the test cases provided, it's clear to see how these methods are used to safely manipulate and manage data concurrently, avoiding potential issues with regular Lists and arrays in a multi-threaded environment.","title":"RemoveAt(int index) Method"},{"location":"Rystem/System.Collections/","text":"Rystem Nuget Package: EnumerableExtensions Class Documentation This document provides a comprehensive guide on the usage and functionality of the methods in the EnumerableExtensions class under Rystem Nuget package. These extension methods provide additional functionality to the standard IEnumerable interface in C#. Class: EnumerableExtensions Location: System.Collections This is a static class, meaning you do not need to instantiate objects from it, and you can directly call its methods. The class contains the following public methods: ElementAt SetElementAt RemoveElementAt Method: ElementAt This method retrieves an element at a specific index from an IEnumerable object. Parameters entities (IEnumerable): The collection from where an element will be retrieved. index (int): The position of the element to be retrieved from the collection. Return Value Returns an object ( object? ) which is the element at the specified index. If the index is out of range, it returns null. Usage Example IEnumerable list = new List<int> {1, 2, 3, 4, 5}; var element = list.ElementAt(2); //element now contains the value 3 Method: SetElementAt Replaces an element at a specific index from an IEnumerable object. Parameters entities (IEnumerable): The collection where an element will be replaced. index (int): The position of the element to be replaced in the collection. value (object?): The new value that will replace the current value at the specified index. Return Value Returns a boolean. If the element is successfully replaced it returns true, else false. Usage Example IEnumerable list = new List<int> {1, 2, 3, 4, 5}; bool isReplaced = list.SetElementAt(2, 9); //List value will be {1, 2, 9, 4, 5} Method: RemoveElementAt Removes an element at a specific index from an IEnumerable object. Parameters entities (IEnumerable): The collection from where an element will be removed. index (int): The position of the element to be removed from the collection. newEntities (out IEnumerable): Output parameter that contains the list after the removal. value (out object?): Output parameter that contains the removed element. Return Value Returns a boolean ( bool ). If the element is successfully removed it returns true, else false. Usage Example IEnumerable list = new List<int> {1, 2, 3, 4, 5}; list.RemoveElementAt(2, out IEnumerable newList, out object removedValue); // newList will be {1, 2, 4, 5} // removedValue will be 3 These methods provide more flexibility and control when dealing with collections in your projects.","title":"System.Collections"},{"location":"Rystem/System.Collections/#rystem-nuget-package-enumerableextensions-class-documentation","text":"This document provides a comprehensive guide on the usage and functionality of the methods in the EnumerableExtensions class under Rystem Nuget package. These extension methods provide additional functionality to the standard IEnumerable interface in C#.","title":"Rystem Nuget Package: EnumerableExtensions Class Documentation"},{"location":"Rystem/System.Collections/#class-enumerableextensions","text":"Location: System.Collections This is a static class, meaning you do not need to instantiate objects from it, and you can directly call its methods. The class contains the following public methods: ElementAt SetElementAt RemoveElementAt","title":"Class: EnumerableExtensions"},{"location":"Rystem/System.Collections/#method-elementat","text":"This method retrieves an element at a specific index from an IEnumerable object. Parameters entities (IEnumerable): The collection from where an element will be retrieved. index (int): The position of the element to be retrieved from the collection. Return Value Returns an object ( object? ) which is the element at the specified index. If the index is out of range, it returns null. Usage Example IEnumerable list = new List<int> {1, 2, 3, 4, 5}; var element = list.ElementAt(2); //element now contains the value 3","title":"Method: ElementAt"},{"location":"Rystem/System.Collections/#method-setelementat","text":"Replaces an element at a specific index from an IEnumerable object. Parameters entities (IEnumerable): The collection where an element will be replaced. index (int): The position of the element to be replaced in the collection. value (object?): The new value that will replace the current value at the specified index. Return Value Returns a boolean. If the element is successfully replaced it returns true, else false. Usage Example IEnumerable list = new List<int> {1, 2, 3, 4, 5}; bool isReplaced = list.SetElementAt(2, 9); //List value will be {1, 2, 9, 4, 5}","title":"Method: SetElementAt"},{"location":"Rystem/System.Collections/#method-removeelementat","text":"Removes an element at a specific index from an IEnumerable object. Parameters entities (IEnumerable): The collection from where an element will be removed. index (int): The position of the element to be removed from the collection. newEntities (out IEnumerable): Output parameter that contains the list after the removal. value (out object?): Output parameter that contains the removed element. Return Value Returns a boolean ( bool ). If the element is successfully removed it returns true, else false. Usage Example IEnumerable list = new List<int> {1, 2, 3, 4, 5}; list.RemoveElementAt(2, out IEnumerable newList, out object removedValue); // newList will be {1, 2, 4, 5} // removedValue will be 3 These methods provide more flexibility and control when dealing with collections in your projects.","title":"Method: RemoveElementAt"},{"location":"Rystem/System.IO/","text":"Documentation Class: StreamExtensions Located under the System.IO namespace, the StreamExtensions class provides utility methods that extend the capabilities of streams and byte arrays. This class is static, meaning all its methods are also static. - Method Name: ToStream Description : This method converts byte arrays to their stream equivalent. Parameters : 1. byte[] bytes : This parameter is a byte array to be converted into a stream. Return Value : A stream derived from the input byte array ( Stream ). Usage Example : byte[] myBytes = new byte[] { 0, 1, 2, 3 }; Stream myStream = myBytes.ToStream(); - Method Name: ToArray Description : Converts a stream to a byte array. Parameters : 1. Stream stream : The input stream to be converted into a byte array. Return Value : A byte array ( byte[] ) that represents the input stream. Usage Example : Stream myStream = new MemoryStream(); byte[] myBytes = myStream.ToArray(); - Method Name: ToArrayAsync Description : Asynchronously converts a stream to a byte array. Parameters : 1. Stream stream : The input stream to be converted into a byte array. Return Value : An asynchronous task that yields a byte array ( Task<byte[]> ), representing the input stream. Usage Example : Stream myStream = new MemoryStream(); byte[] myBytes = await myStream.ToArrayAsync(); The StreamExtensions class is particularly useful when dealing with I/O operations where conversion between byte arrays and streams are frequently required. For instance, reading and writing to files or network streams frequently requires such conversions.","title":"System.IO"},{"location":"Rystem/System.IO/#documentation","text":"","title":"Documentation"},{"location":"Rystem/System.IO/#class-streamextensions","text":"Located under the System.IO namespace, the StreamExtensions class provides utility methods that extend the capabilities of streams and byte arrays. This class is static, meaning all its methods are also static.","title":"Class: StreamExtensions"},{"location":"Rystem/System.IO/#-method-name-tostream","text":"Description : This method converts byte arrays to their stream equivalent. Parameters : 1. byte[] bytes : This parameter is a byte array to be converted into a stream. Return Value : A stream derived from the input byte array ( Stream ). Usage Example : byte[] myBytes = new byte[] { 0, 1, 2, 3 }; Stream myStream = myBytes.ToStream();","title":"- Method Name: ToStream"},{"location":"Rystem/System.IO/#-method-name-toarray","text":"Description : Converts a stream to a byte array. Parameters : 1. Stream stream : The input stream to be converted into a byte array. Return Value : A byte array ( byte[] ) that represents the input stream. Usage Example : Stream myStream = new MemoryStream(); byte[] myBytes = myStream.ToArray();","title":"- Method Name: ToArray"},{"location":"Rystem/System.IO/#-method-name-toarrayasync","text":"Description : Asynchronously converts a stream to a byte array. Parameters : 1. Stream stream : The input stream to be converted into a byte array. Return Value : An asynchronous task that yields a byte array ( Task<byte[]> ), representing the input stream. Usage Example : Stream myStream = new MemoryStream(); byte[] myBytes = await myStream.ToArrayAsync(); The StreamExtensions class is particularly useful when dealing with I/O operations where conversion between byte arrays and streams are frequently required. For instance, reading and writing to files or network streams frequently requires such conversions.","title":"- Method Name: ToArrayAsync"},{"location":"Rystem/System.Linq.Expressions/","text":"Rystem Library Documentation - System.Linq.Expressions Namespace This section contains detailed documentation of the System.Linq.Expressions namespace classes and their associated public methods included in the Rystem library. 1. ExpressionExtensions The ExpressionExtensions class provides a set of methods for extending the functionality of expressions. Methods 1.1. Serialize Description : This method serializes the given expression, converting it into a string format. Parameters : - expression : The expression object you want to serialize. Return Value : Returns a string representation of the given expression. Usage Example : var serializedExpression = someExpression.Serialize(); 1.2. Deserialize Description : This method deserializes the given string expression into an Expression of the specified type. Parameters : - expressionAsString : The serialized expression to be deserialized. Return Value : Returns a deserialized Expression of given type and result type. Usage Example : var deserializedExpression = serializedExpression.Deserialize<DataType, ResultType>(); 1.3. DeserializeAndCompile Description : This method deserializes the given string expression into an Expression of the specified type and compiles it. Parameters : - expressionAsString : The expression you want to deserialize and compile. Return Value : Returns a compiled delegate of the deserialized Expression of given type and result type. Usage Example : var compiledExpression = serializedExpression.DeserializeAndCompile<DataType, ResultType>(); This class contains a variety of other methods that allow further functionality, such as Async Invocation and transformation, changing an Expression's return type, and retrieving a property from an Expression. 2. ExpressionSerializer The ExpressionSerializer class serializes and deserializes Expression objects. 2.1. Serialize Description : This method serializes the provided expression. Parameters : - expression : The expression object you want to serialize. Return Value : This method a string representation of the provided expression. Usage Example : var serializedExpression = ExpressionSerializer.Serialize(someExpression); 2.2. Deserialize Description : This method deserializes the given string expression into an Expression of the specified type. Parameters : - expressionAsString : The serialized expression to be deserialized. Return Value : Returns a deserialized Expression of given type and return type. Usage Example : var deserializedExpression = ExpressionSerializer.Deserialize<DataType, ResultType>(serializedExpression); 3. LambdaExpressionExtensions The LambdaExpressionExtensions class contains methods for working with Lambda Expressions, such as changing the return type and transforming a generic Lambda Expression into a strongly typed one. 3.1. ChangeReturnType Description : This method changes the return type of the given Lambda expression. Parameters : - expression : The Lambda Expression whose return type needs to be changed. - toChange : The new return type. Return Value : Returns a new Lambda Expression with the updated return type. Usage Example : var updatedExpression = originalExpression.ChangeReturnType(newType); The other methods in this class provide functionalities for casting a Lambda Expression to a specific return type, as well as transforming the same. 4. BinaryExpressionInterpreter The BinaryExpressionInterpreter class is used to interpret Binary Expressions. Primarily it reads a given Expression and returns a list of sub-expressions. 5. ConstantExpressionInterpreter The ConstantExpressionInterpreter class is used to interpret Constant Expressions. If the expression is a Constant Expression, it replaces the value in the context with the actual value. This interpretation and reading of Expressions helps in performing operations and transformations with the Expressions. Conclusion The System.Linq.Expressions namespace in the Rystem library provides a set of functionality to work with different types of expressions. It offers features like serialization, deserialization, modification, invocation and interpretation of expressions. This functionality can be useful in various use cases where managing and manipulating expressions is required.","title":"System.Linq.Expressions"},{"location":"Rystem/System.Linq.Expressions/#rystem-library-documentation-systemlinqexpressions-namespace","text":"This section contains detailed documentation of the System.Linq.Expressions namespace classes and their associated public methods included in the Rystem library.","title":"Rystem Library Documentation - System.Linq.Expressions Namespace"},{"location":"Rystem/System.Linq.Expressions/#1-expressionextensions","text":"The ExpressionExtensions class provides a set of methods for extending the functionality of expressions.","title":"1. ExpressionExtensions"},{"location":"Rystem/System.Linq.Expressions/#methods","text":"","title":"Methods"},{"location":"Rystem/System.Linq.Expressions/#11-serialize","text":"Description : This method serializes the given expression, converting it into a string format. Parameters : - expression : The expression object you want to serialize. Return Value : Returns a string representation of the given expression. Usage Example : var serializedExpression = someExpression.Serialize();","title":"1.1. Serialize"},{"location":"Rystem/System.Linq.Expressions/#12-deserialize","text":"Description : This method deserializes the given string expression into an Expression of the specified type. Parameters : - expressionAsString : The serialized expression to be deserialized. Return Value : Returns a deserialized Expression of given type and result type. Usage Example : var deserializedExpression = serializedExpression.Deserialize<DataType, ResultType>();","title":"1.2. Deserialize"},{"location":"Rystem/System.Linq.Expressions/#13-deserializeandcompile","text":"Description : This method deserializes the given string expression into an Expression of the specified type and compiles it. Parameters : - expressionAsString : The expression you want to deserialize and compile. Return Value : Returns a compiled delegate of the deserialized Expression of given type and result type. Usage Example : var compiledExpression = serializedExpression.DeserializeAndCompile<DataType, ResultType>(); This class contains a variety of other methods that allow further functionality, such as Async Invocation and transformation, changing an Expression's return type, and retrieving a property from an Expression.","title":"1.3. DeserializeAndCompile"},{"location":"Rystem/System.Linq.Expressions/#2-expressionserializer","text":"The ExpressionSerializer class serializes and deserializes Expression objects.","title":"2. ExpressionSerializer"},{"location":"Rystem/System.Linq.Expressions/#21-serialize","text":"Description : This method serializes the provided expression. Parameters : - expression : The expression object you want to serialize. Return Value : This method a string representation of the provided expression. Usage Example : var serializedExpression = ExpressionSerializer.Serialize(someExpression);","title":"2.1. Serialize"},{"location":"Rystem/System.Linq.Expressions/#22-deserialize","text":"Description : This method deserializes the given string expression into an Expression of the specified type. Parameters : - expressionAsString : The serialized expression to be deserialized. Return Value : Returns a deserialized Expression of given type and return type. Usage Example : var deserializedExpression = ExpressionSerializer.Deserialize<DataType, ResultType>(serializedExpression);","title":"2.2. Deserialize"},{"location":"Rystem/System.Linq.Expressions/#3-lambdaexpressionextensions","text":"The LambdaExpressionExtensions class contains methods for working with Lambda Expressions, such as changing the return type and transforming a generic Lambda Expression into a strongly typed one.","title":"3. LambdaExpressionExtensions"},{"location":"Rystem/System.Linq.Expressions/#31-changereturntype","text":"Description : This method changes the return type of the given Lambda expression. Parameters : - expression : The Lambda Expression whose return type needs to be changed. - toChange : The new return type. Return Value : Returns a new Lambda Expression with the updated return type. Usage Example : var updatedExpression = originalExpression.ChangeReturnType(newType); The other methods in this class provide functionalities for casting a Lambda Expression to a specific return type, as well as transforming the same.","title":"3.1. ChangeReturnType"},{"location":"Rystem/System.Linq.Expressions/#4-binaryexpressioninterpreter","text":"The BinaryExpressionInterpreter class is used to interpret Binary Expressions. Primarily it reads a given Expression and returns a list of sub-expressions.","title":"4. BinaryExpressionInterpreter"},{"location":"Rystem/System.Linq.Expressions/#5-constantexpressioninterpreter","text":"The ConstantExpressionInterpreter class is used to interpret Constant Expressions. If the expression is a Constant Expression, it replaces the value in the context with the actual value. This interpretation and reading of Expressions helps in performing operations and transformations with the Expressions.","title":"5. ConstantExpressionInterpreter"},{"location":"Rystem/System.Linq.Expressions/#conclusion","text":"The System.Linq.Expressions namespace in the Rystem library provides a set of functionality to work with different types of expressions. It offers features like serialization, deserialization, modification, invocation and interpretation of expressions. This functionality can be useful in various use cases where managing and manipulating expressions is required.","title":"Conclusion"},{"location":"Rystem/System.Linq/","text":"Class Documentation System.Linq.LinqAsyncExtensions 1. Method: AllAsync<TSource> What it does: Evaluates all elements in an IEnumerable<TSource> collection based on a given condition specified by a Expression<Func<TSource, ValueTask<bool>>> (a predicate). Parameters: - source : A collection of type TSource . It serves as the input data. - expression : An expression that defines the condition for each item in the source collection. Return value: Returns ValueTask<bool> . If all elements satisfy the condition, the method returns true . Otherwise, it returns false . Usage Example: IEnumerable<int> collection = new List<int>() { 1, 2, 3, 4, 5 }; Expression<Func<int, ValueTask<bool>>> expression = num => new ValueTask<bool>(num > 0); bool result = await collection.AllAsync(expression); 2. Method: AnyAsync<TSource> What it does: Evaluates if any element in a collection satisfies a condition defined by a Expression<Func<TSource, ValueTask<bool>>> . Parameters: - source : A collection of type TSource . It serves as the input data. - expression : An expression that defines the condition for each item in the source collection. Return value: Returns a ValueTask<bool> . If any element satisfy the condition, the method returns true . Otherwise, it returns false . Usage Example: IEnumerable<int> collection = new List<int>() { 1, 2, 3, 4, 5 }; Expression<Func<int, ValueTask<bool>>> expression = num => new ValueTask<bool>(num > 5); bool result = await collection.AnyAsync(expression); System.Linq.QueryableLinqExtensions The QueryableLinqExtensions class provides extension methods for IQueryable data types, such as entities in a database query. These methods inherently support asynchronous operation. 3. Method: CallMethod<TSource, TResult> What it does: Invokes a generic version of a method for a query with a given name, based on the provided LambdaExpression . Parameters: * query : An IQueryable<TSource> where the method will be applied. * methodName : A string that specifies the name of the method to be invoked. * expression : A LambdaExpression to be passed to the method. * typeWhereToSearchTheMethod : A Type , which specifies where to find the method; by default, it examines System.Linq.Queryable . Return value: Returns an object of type TResult , which is the result of the method invocation. Usage Example: IQueryable<int> query = new List<int>() { 1, 2, 3, 4, 5 }.AsQueryable(); string methodName = \"Average\"; LambdaExpression expression = Expression.Lambda<Func<int, int>>(Expression.Constant(1), Expression.Parameter(typeof(int))); var result = query.CallMethod<int, decimal>(methodName, expression); 4. Method: GroupBy<TSource, TKey> What it does: Groups items in an IQueryable<TSource> according to a specified LambdaExpression . Parameters: * source : An IQueryable<TSource> to be grouped. * keySelector : A LambdaExpression that defines the selector function. Return value: Returns an IQueryable<IGrouping<TKey, TSource>> where each IGrouping<TKey,TSource> object contains a collection of TSource objects and a key. Usage Example: IQueryable<int> source = new List<int>() { 1, 1, 2, 3, 4, 5 }.AsQueryable(); LambdaExpression keySelector = Expression.Lambda<Func<int, int>>(Expression.Constant(1), Expression.Parameter(typeof(int))); var result = source.GroupBy<int, int>(keySelector); And many other methods available in the QueryableLinqExtensions follow similar patterns, extending the IQueryable<TSource> , and can be used in similar ways as illustrated above.","title":"System.Linq"},{"location":"Rystem/System.Linq/#class-documentation","text":"","title":"Class Documentation"},{"location":"Rystem/System.Linq/#systemlinqlinqasyncextensions","text":"","title":"System.Linq.LinqAsyncExtensions"},{"location":"Rystem/System.Linq/#1-method-allasynctsource","text":"What it does: Evaluates all elements in an IEnumerable<TSource> collection based on a given condition specified by a Expression<Func<TSource, ValueTask<bool>>> (a predicate). Parameters: - source : A collection of type TSource . It serves as the input data. - expression : An expression that defines the condition for each item in the source collection. Return value: Returns ValueTask<bool> . If all elements satisfy the condition, the method returns true . Otherwise, it returns false . Usage Example: IEnumerable<int> collection = new List<int>() { 1, 2, 3, 4, 5 }; Expression<Func<int, ValueTask<bool>>> expression = num => new ValueTask<bool>(num > 0); bool result = await collection.AllAsync(expression);","title":"1. Method: AllAsync&lt;TSource&gt;"},{"location":"Rystem/System.Linq/#2-method-anyasynctsource","text":"What it does: Evaluates if any element in a collection satisfies a condition defined by a Expression<Func<TSource, ValueTask<bool>>> . Parameters: - source : A collection of type TSource . It serves as the input data. - expression : An expression that defines the condition for each item in the source collection. Return value: Returns a ValueTask<bool> . If any element satisfy the condition, the method returns true . Otherwise, it returns false . Usage Example: IEnumerable<int> collection = new List<int>() { 1, 2, 3, 4, 5 }; Expression<Func<int, ValueTask<bool>>> expression = num => new ValueTask<bool>(num > 5); bool result = await collection.AnyAsync(expression);","title":"2. Method: AnyAsync&lt;TSource&gt;"},{"location":"Rystem/System.Linq/#systemlinqqueryablelinqextensions","text":"The QueryableLinqExtensions class provides extension methods for IQueryable data types, such as entities in a database query. These methods inherently support asynchronous operation.","title":"System.Linq.QueryableLinqExtensions"},{"location":"Rystem/System.Linq/#3-method-callmethodtsource-tresult","text":"What it does: Invokes a generic version of a method for a query with a given name, based on the provided LambdaExpression . Parameters: * query : An IQueryable<TSource> where the method will be applied. * methodName : A string that specifies the name of the method to be invoked. * expression : A LambdaExpression to be passed to the method. * typeWhereToSearchTheMethod : A Type , which specifies where to find the method; by default, it examines System.Linq.Queryable . Return value: Returns an object of type TResult , which is the result of the method invocation. Usage Example: IQueryable<int> query = new List<int>() { 1, 2, 3, 4, 5 }.AsQueryable(); string methodName = \"Average\"; LambdaExpression expression = Expression.Lambda<Func<int, int>>(Expression.Constant(1), Expression.Parameter(typeof(int))); var result = query.CallMethod<int, decimal>(methodName, expression);","title":"3. Method: CallMethod&lt;TSource, TResult&gt;"},{"location":"Rystem/System.Linq/#4-method-groupbytsource-tkey","text":"What it does: Groups items in an IQueryable<TSource> according to a specified LambdaExpression . Parameters: * source : An IQueryable<TSource> to be grouped. * keySelector : A LambdaExpression that defines the selector function. Return value: Returns an IQueryable<IGrouping<TKey, TSource>> where each IGrouping<TKey,TSource> object contains a collection of TSource objects and a key. Usage Example: IQueryable<int> source = new List<int>() { 1, 1, 2, 3, 4, 5 }.AsQueryable(); LambdaExpression keySelector = Expression.Lambda<Func<int, int>>(Expression.Constant(1), Expression.Parameter(typeof(int))); var result = source.GroupBy<int, int>(keySelector); And many other methods available in the QueryableLinqExtensions follow similar patterns, extending the IQueryable<TSource> , and can be used in similar ways as illustrated above.","title":"4. Method: GroupBy&lt;TSource, TKey&gt;"},{"location":"Rystem/System.ProgrammingLanguage/","text":"Documentation Class: IProgrammingLanguage Provides an interface to define methods that are to be implemented by different programming languages. Each method in the interface defines a part of transforming a given Type to a string representation that fits a specific programming language. Methods: Start(Type type, string name) Purpose : Generate the initiation string of a type definition in a specific programming language. The type becomes the name of the entity being defined in the language. Parameters : - type (Type) : The .NET Type that is being converted. - name (string) : The name of the entity being defined. Return Value : The initiation string of type definition for the specific programming language. GetMimeType() Purpose : Retrieve the MIME type of the programming language. Return Value : The MIME type of the specific programming language. SetProperty(string name, string type) Purpose : Generate a string presenting a property in the specific programming language. Parameters : - name (string) : The name of the property. - type (string) : The type of the property. Return Value : A string showing how to declare a property with the name and type in a specific programming language. GetPrimitiveType(Type) Purpose : Prepare the string representation of a primitive type in a particular programming language. Parameters : - type (Type) : The primitive .NET Type that is being converted. Return Value : The representation of the primitive Type in the specific programming language. GetNonPrimitiveType(Type) Purpose : Prepare the string representation of a non-primitive type (like: List , Array , Map , etc.) in a particular programming Parameters : - type (Type) : The non-primitive .NET Type that is being converted. Return Value : The representation of the non-primitive Type in the specific programming language. End() Purpose : Generate the string ending a type definition in a specific programming language. Return Value : The string ending the type definition for the specific programming language. ConvertEnum(string name, Type type) Purpose : Generate the string representation of an Enum type in the specific programming language. Parameters : - name (string) : The name of the Enum. - type (Type) : The Enum type that is being converted. Return Value : The representation of the Enum in the specific programming language. Class: ProgrammingLanguageExtensions Provides some extension methods to convert a Type or a collection of Types to their representation in a specific programming language. Methods: ConvertAs(this IEnumerable<Type> types, ProgrammingLanguageType programmingLanguage) Purpose : Convert a collection of types to their representation in a specific programming language in a bulk operation. Parameters : - types (IEnumerable<Type>) : The collection of .NET types that are being converted. - programmingLanguage (ProgrammingLanguageType) : The programming language to convert to. Return Value : An object of type ProgrammingLanguangeResponse that stores the text of all the types' representation and the MIME type of the programming language. Usage Example : csharp List<Type> types = new List<Type> {typeof(int), typeof(string)}; var response = types.ConvertAs(ProgrammingLanguageType.Typescript); ConvertAs(this Type type, ProgrammingLanguageType programmingLanguage, string? name = null) Purpose : Convert a type to its representation in a specific programming language. Parameters : - types (Type) : The .NET type that is being converted. - programmingLanguage (ProgrammingLanguageType) : The programming language to convert to. - name (string?) : Optional parameter for the name of the entity. If not provided, the type Name will be used. Return Value : An object of type ProgrammingLanguangeResponse that stores the text of the type's representation and the MIME type of the programming language. Usage Example : csharp var response = typeof(int).ConvertAs(ProgrammingLanguageType.Typescript, \"MyInt\"); Class: ProgrammingLanguangeResponse Simple container that stores the result of a conversion to a different programming language. It includes the text of the new representation and the MIME type of the programing language. Properties: Text (string) : The text representation of the converted type. MimeType (string) : The MIME type of the specific programming language. Class: TypeScript This class implements the IProgrammingLanguage interface to provide functionality specific to the TypeScript language. Note : The method's documentation is the same as the one defined in the IProgrammingLanguage , but specific to TypeScript. Usage Example string name = \"MyClass\"; Type type = typeof(MyClass); IProgrammingLanguage ts = new TypeScript(); var start = ts.Start(type, name); Note : You will hardly need to call the TypeScript methods directly; this class is mainly used by calling the methods of the ProgrammingLanguageExtensions class.","title":"System.ProgrammingLanguage"},{"location":"Rystem/System.ProgrammingLanguage/#documentation","text":"","title":"Documentation"},{"location":"Rystem/System.ProgrammingLanguage/#class-iprogramminglanguage","text":"Provides an interface to define methods that are to be implemented by different programming languages. Each method in the interface defines a part of transforming a given Type to a string representation that fits a specific programming language.","title":"Class: IProgrammingLanguage"},{"location":"Rystem/System.ProgrammingLanguage/#methods","text":"Start(Type type, string name) Purpose : Generate the initiation string of a type definition in a specific programming language. The type becomes the name of the entity being defined in the language. Parameters : - type (Type) : The .NET Type that is being converted. - name (string) : The name of the entity being defined. Return Value : The initiation string of type definition for the specific programming language. GetMimeType() Purpose : Retrieve the MIME type of the programming language. Return Value : The MIME type of the specific programming language. SetProperty(string name, string type) Purpose : Generate a string presenting a property in the specific programming language. Parameters : - name (string) : The name of the property. - type (string) : The type of the property. Return Value : A string showing how to declare a property with the name and type in a specific programming language. GetPrimitiveType(Type) Purpose : Prepare the string representation of a primitive type in a particular programming language. Parameters : - type (Type) : The primitive .NET Type that is being converted. Return Value : The representation of the primitive Type in the specific programming language. GetNonPrimitiveType(Type) Purpose : Prepare the string representation of a non-primitive type (like: List , Array , Map , etc.) in a particular programming Parameters : - type (Type) : The non-primitive .NET Type that is being converted. Return Value : The representation of the non-primitive Type in the specific programming language. End() Purpose : Generate the string ending a type definition in a specific programming language. Return Value : The string ending the type definition for the specific programming language. ConvertEnum(string name, Type type) Purpose : Generate the string representation of an Enum type in the specific programming language. Parameters : - name (string) : The name of the Enum. - type (Type) : The Enum type that is being converted. Return Value : The representation of the Enum in the specific programming language.","title":"Methods:"},{"location":"Rystem/System.ProgrammingLanguage/#class-programminglanguageextensions","text":"Provides some extension methods to convert a Type or a collection of Types to their representation in a specific programming language.","title":"Class: ProgrammingLanguageExtensions"},{"location":"Rystem/System.ProgrammingLanguage/#methods_1","text":"ConvertAs(this IEnumerable<Type> types, ProgrammingLanguageType programmingLanguage) Purpose : Convert a collection of types to their representation in a specific programming language in a bulk operation. Parameters : - types (IEnumerable<Type>) : The collection of .NET types that are being converted. - programmingLanguage (ProgrammingLanguageType) : The programming language to convert to. Return Value : An object of type ProgrammingLanguangeResponse that stores the text of all the types' representation and the MIME type of the programming language. Usage Example : csharp List<Type> types = new List<Type> {typeof(int), typeof(string)}; var response = types.ConvertAs(ProgrammingLanguageType.Typescript); ConvertAs(this Type type, ProgrammingLanguageType programmingLanguage, string? name = null) Purpose : Convert a type to its representation in a specific programming language. Parameters : - types (Type) : The .NET type that is being converted. - programmingLanguage (ProgrammingLanguageType) : The programming language to convert to. - name (string?) : Optional parameter for the name of the entity. If not provided, the type Name will be used. Return Value : An object of type ProgrammingLanguangeResponse that stores the text of the type's representation and the MIME type of the programming language. Usage Example : csharp var response = typeof(int).ConvertAs(ProgrammingLanguageType.Typescript, \"MyInt\");","title":"Methods:"},{"location":"Rystem/System.ProgrammingLanguage/#class-programminglanguangeresponse","text":"Simple container that stores the result of a conversion to a different programming language. It includes the text of the new representation and the MIME type of the programing language.","title":"Class: ProgrammingLanguangeResponse"},{"location":"Rystem/System.ProgrammingLanguage/#properties","text":"Text (string) : The text representation of the converted type. MimeType (string) : The MIME type of the specific programming language.","title":"Properties:"},{"location":"Rystem/System.ProgrammingLanguage/#class-typescript","text":"This class implements the IProgrammingLanguage interface to provide functionality specific to the TypeScript language. Note : The method's documentation is the same as the one defined in the IProgrammingLanguage , but specific to TypeScript.","title":"Class: TypeScript"},{"location":"Rystem/System.ProgrammingLanguage/#usage-example","text":"string name = \"MyClass\"; Type type = typeof(MyClass); IProgrammingLanguage ts = new TypeScript(); var start = ts.Start(type, name); Note : You will hardly need to call the TypeScript methods directly; this class is mainly used by calling the methods of the ProgrammingLanguageExtensions class.","title":"Usage Example"},{"location":"Rystem/System.Reflection/","text":"Documentation Rystem is a library consisting of several classes that work primarily with reflection for dynamic object management, interpreting bytecodes, and mocking elements. Constructor Class This class contains static methods for dealing with object constructors. Method Name: InvokeWithBestDynamicFit Description: Invokes the most suitable dynamic constructor to initialize object of type T . Parameters: object[] args : Array of arguments to pass to constructor. Their types should match some constructor for T . Return Value: Returns a new instance of type T , or default if instantiation fails. Usage Example: csharp var objectInstance = Constructor.InvokeWithBestDynamicFit<MyClass>(arg1, arg2); Method Name: ConstructWithBestDynamicFit Description: Constructs an object dynamically using the best possible fit constructor. Parameters: Type type : The type of object to be created. object[] args : The constructor arguments. Return Value: Returns a new instance of type T , or default if instantiation fails. Usage Example: csharp var objectInstance = Constructor.ConstructWithBestDynamicFit(typeof(MyClass), arg1, arg2); MethodInfoExtensions Class Method Name: GetBodyAsString Description: Gets the body of the method as a string. Parameters: None Return Value: Returns the method body as a string. Usage Example: csharp var method = typeof(MyClass).GetMethod(\"MyMethod\"); string bodyString = method.GetBodyAsString(); Method Name: GetInstructions Description: Retrieves the list of instructions related to the method. Parameters: None Return Value: Returns a list of ILInstruction objects. Usage Example: csharp var method = typeof(MyClass).GetMethod(\"MyMethod\"); var instructions = method.GetInstructions(); PrimitiveExtensions Class This class includes static extension methods to check the specifics of a given type. Method Name: IsPrimitive Description: It checks whether the type T is a primitive. Parameters: None Return Value: Returns a bool value based on whether the entity type is a primitive. Usage Example: csharp int i = 5; bool isPrimitive = i.IsPrimitive(); ReflectionExtensions Class Provides extension methods for Type objects to perform common reflection tasks, like checking if a type has an interface, checking for inheritance or field existence, and creating instances. Generics Class This class includes various methods for working with generic methods and type parameters. MethodInfoWrapper Class This class wraps a MethodInfo object, allowing access to the method's attributes and the ability to invoke the method. PrimitiveExtensions Class Contains methods to help determine the more complex details of a given type, such as whether it is numeric, Boolean, an Enum, ReflectionExtensions Class Defines extension methods to allow for easier and cleaner reflection code. This includes shortcuts to check for inheritance, fetch properties, and more. Generics Class This class offers static methods to work with MethodInfo objects that represent generic methods. MethodBodyReader Class This class is responsible for reading the IL code of a method body and translating it into objects that can be analyzed. Note This is just a partial list of available classes. The detailed documentation will contain in-depth descriptions, edge cases, and usage examples for each function, class, property, and other elements of the real code. This task is pretty challenging to do for such large input as the sample given. The AI does not have a deep understanding of code and may overlook important parts or misinterpret certain sections.","title":"System.Reflection"},{"location":"Rystem/System.Reflection/#documentation","text":"Rystem is a library consisting of several classes that work primarily with reflection for dynamic object management, interpreting bytecodes, and mocking elements.","title":"Documentation"},{"location":"Rystem/System.Reflection/#constructor-class","text":"This class contains static methods for dealing with object constructors. Method Name: InvokeWithBestDynamicFit Description: Invokes the most suitable dynamic constructor to initialize object of type T . Parameters: object[] args : Array of arguments to pass to constructor. Their types should match some constructor for T . Return Value: Returns a new instance of type T , or default if instantiation fails. Usage Example: csharp var objectInstance = Constructor.InvokeWithBestDynamicFit<MyClass>(arg1, arg2); Method Name: ConstructWithBestDynamicFit Description: Constructs an object dynamically using the best possible fit constructor. Parameters: Type type : The type of object to be created. object[] args : The constructor arguments. Return Value: Returns a new instance of type T , or default if instantiation fails. Usage Example: csharp var objectInstance = Constructor.ConstructWithBestDynamicFit(typeof(MyClass), arg1, arg2);","title":"Constructor Class"},{"location":"Rystem/System.Reflection/#methodinfoextensions-class","text":"Method Name: GetBodyAsString Description: Gets the body of the method as a string. Parameters: None Return Value: Returns the method body as a string. Usage Example: csharp var method = typeof(MyClass).GetMethod(\"MyMethod\"); string bodyString = method.GetBodyAsString(); Method Name: GetInstructions Description: Retrieves the list of instructions related to the method. Parameters: None Return Value: Returns a list of ILInstruction objects. Usage Example: csharp var method = typeof(MyClass).GetMethod(\"MyMethod\"); var instructions = method.GetInstructions();","title":"MethodInfoExtensions Class"},{"location":"Rystem/System.Reflection/#primitiveextensions-class","text":"This class includes static extension methods to check the specifics of a given type. Method Name: IsPrimitive Description: It checks whether the type T is a primitive. Parameters: None Return Value: Returns a bool value based on whether the entity type is a primitive. Usage Example: csharp int i = 5; bool isPrimitive = i.IsPrimitive();","title":"PrimitiveExtensions Class"},{"location":"Rystem/System.Reflection/#reflectionextensions-class","text":"Provides extension methods for Type objects to perform common reflection tasks, like checking if a type has an interface, checking for inheritance or field existence, and creating instances.","title":"ReflectionExtensions Class"},{"location":"Rystem/System.Reflection/#generics-class","text":"This class includes various methods for working with generic methods and type parameters.","title":"Generics Class"},{"location":"Rystem/System.Reflection/#methodinfowrapper-class","text":"This class wraps a MethodInfo object, allowing access to the method's attributes and the ability to invoke the method.","title":"MethodInfoWrapper Class"},{"location":"Rystem/System.Reflection/#primitiveextensions-class_1","text":"Contains methods to help determine the more complex details of a given type, such as whether it is numeric, Boolean, an Enum,","title":"PrimitiveExtensions Class"},{"location":"Rystem/System.Reflection/#reflectionextensions-class_1","text":"Defines extension methods to allow for easier and cleaner reflection code. This includes shortcuts to check for inheritance, fetch properties, and more.","title":"ReflectionExtensions Class"},{"location":"Rystem/System.Reflection/#generics-class_1","text":"This class offers static methods to work with MethodInfo objects that represent generic methods.","title":"Generics Class"},{"location":"Rystem/System.Reflection/#methodbodyreader-class","text":"This class is responsible for reading the IL code of a method body and translating it into objects that can be analyzed.","title":"MethodBodyReader Class"},{"location":"Rystem/System.Reflection/#note","text":"This is just a partial list of available classes. The detailed documentation will contain in-depth descriptions, edge cases, and usage examples for each function, class, property, and other elements of the real code. This task is pretty challenging to do for such large input as the sample given. The AI does not have a deep understanding of code and may overlook important parts or misinterpret certain sections.","title":"Note"},{"location":"Rystem/System.Security.Cryptography/","text":"CryptoExtensions Class The CryptoExtensions class is a utility class that provides methods for hashing strings and objects. Method: ToHash(this string message) This method computes the SHA512 hash of the provided string message. Parameters: message : The string that needs to be hashed. Return Value: A hexadecimal string representing the hash value of the given string. The return type is string . Usage Example: string originalString = \"This is a string to hash\"; string hashedString = originalString.ToHash(); Method: ToHash<T>(this T message) This method computes the SHA512 hash of the JSON representation of the provided object. Parameters: message : The object that needs to be hashed. Return Value: A hexadecimal string representing the hash value of the JSON string representation of the given object. The return type is string . Usage Example: Foo objectToHash = new Foo{Values = new List<string> {\"aa\", \"bb\", \"cc\"}, X = true}; string hashedObject = objectToHash.ToHash(); This method is useful when you need to hash complex data structures, such as an entire class. Please note that the class should be serializable to JSON in order for this method to work. Above examples show several practical cases. You can hash any string or an object. ToHash() method also uses internally System.Text.Json for JSON representation of the object, so all constraints for that library apply here too. Test Cases Several test cases from the HashTest class provide insight into usage of the ToHash() methods. Comparing the hash of an object to itself: var foo = new Foo() { Values = new List<string>() { \"aa\", \"bb\", \"cc\" }, X = true }; Assert.Equal(foo.ToHash(), foo.ToHash()); Hashing a UUID: var message = Guid.NewGuid(); Assert.Equal(message.ToHash(), message.ToHash()); Hashing a hard-coded UUID: var k = Guid.Parse(\"41e2c840-8ba1-4c0b-8a9b-781747a5de0c\"); Assert.Equal(\"18edf95916c3aa4fd09a754e2e799fce252b0b7a76ffff76962175ad0f9921bc13bbd675954c1121d9177ffc222622c5adecf8544acb7a844117d6b1fab4590a\", k.ToHash()); In the AppUser class ( Rystem.Test.UnitTest.System.Population.Random.Models ), the ToHash() method is used in a computed property HashedMainGroup to provide a hashed representation of MainGroup . Usage in a class field: public string? HashedMainGroup => MainGroup?.ToHash(); In the CsvTest class ( Rystem.Test.UnitTest.Csv ), there is another example where ToHash() method is used to hash the MainGroup field of AppUser class: _users.Add(new AppUser { MainGroup = Guid.NewGuid().ToString() });","title":"System.Security.Cryptography"},{"location":"Rystem/System.Security.Cryptography/#cryptoextensions-class","text":"The CryptoExtensions class is a utility class that provides methods for hashing strings and objects.","title":"CryptoExtensions Class"},{"location":"Rystem/System.Security.Cryptography/#method-tohashthis-string-message","text":"This method computes the SHA512 hash of the provided string message.","title":"Method: ToHash(this string message)"},{"location":"Rystem/System.Security.Cryptography/#parameters","text":"message : The string that needs to be hashed.","title":"Parameters:"},{"location":"Rystem/System.Security.Cryptography/#return-value","text":"A hexadecimal string representing the hash value of the given string. The return type is string .","title":"Return Value:"},{"location":"Rystem/System.Security.Cryptography/#usage-example","text":"string originalString = \"This is a string to hash\"; string hashedString = originalString.ToHash();","title":"Usage Example:"},{"location":"Rystem/System.Security.Cryptography/#method-tohashtthis-t-message","text":"This method computes the SHA512 hash of the JSON representation of the provided object.","title":"Method: ToHash&lt;T&gt;(this T message)"},{"location":"Rystem/System.Security.Cryptography/#parameters_1","text":"message : The object that needs to be hashed.","title":"Parameters:"},{"location":"Rystem/System.Security.Cryptography/#return-value_1","text":"A hexadecimal string representing the hash value of the JSON string representation of the given object. The return type is string .","title":"Return Value:"},{"location":"Rystem/System.Security.Cryptography/#usage-example_1","text":"Foo objectToHash = new Foo{Values = new List<string> {\"aa\", \"bb\", \"cc\"}, X = true}; string hashedObject = objectToHash.ToHash(); This method is useful when you need to hash complex data structures, such as an entire class. Please note that the class should be serializable to JSON in order for this method to work. Above examples show several practical cases. You can hash any string or an object. ToHash() method also uses internally System.Text.Json for JSON representation of the object, so all constraints for that library apply here too.","title":"Usage Example:"},{"location":"Rystem/System.Security.Cryptography/#test-cases","text":"Several test cases from the HashTest class provide insight into usage of the ToHash() methods. Comparing the hash of an object to itself: var foo = new Foo() { Values = new List<string>() { \"aa\", \"bb\", \"cc\" }, X = true }; Assert.Equal(foo.ToHash(), foo.ToHash()); Hashing a UUID: var message = Guid.NewGuid(); Assert.Equal(message.ToHash(), message.ToHash()); Hashing a hard-coded UUID: var k = Guid.Parse(\"41e2c840-8ba1-4c0b-8a9b-781747a5de0c\"); Assert.Equal(\"18edf95916c3aa4fd09a754e2e799fce252b0b7a76ffff76962175ad0f9921bc13bbd675954c1121d9177ffc222622c5adecf8544acb7a844117d6b1fab4590a\", k.ToHash()); In the AppUser class ( Rystem.Test.UnitTest.System.Population.Random.Models ), the ToHash() method is used in a computed property HashedMainGroup to provide a hashed representation of MainGroup . Usage in a class field: public string? HashedMainGroup => MainGroup?.ToHash(); In the CsvTest class ( Rystem.Test.UnitTest.Csv ), there is another example where ToHash() method is used to hash the MainGroup field of AppUser class: _users.Add(new AppUser { MainGroup = Guid.NewGuid().ToString() });","title":"Test Cases"},{"location":"Rystem/System.Text.Csv/","text":"Documentation CsvEngine Class The CsvEngine class is an internal sealed class that helps with converting an IEnumerable<T> object into a string in CSV form. Method: Convert Convert transforms IEnumerable of T into a CSV String. Method Name: Convert<T> - Parameters: 1. values (IEnumerable ) : Sequence of any consumer-provided generic object type. Return Value: This method returns a string which represents the given Enumerable objects in CSV format. Note: \"T\" can be any class that the user wants to convert into CSV. Usage Example: // Assuming T is a class Product with fields Name (string) and Price (int) var products = new List<Product> { new Product {Name = \"Product1\", Price = 50}, new Product {Name = \"Product2\", Price = 60} }; var csv = CsvEngine.Convert(products); CsvEngineExtensions Class The CsvEngineExtensions class is a public static class which extends the functionality of IEnumerable<T> with a function ToCsv . Method: ToCsv The ToCsv method is an extension method for IEnumerable<T> that converts the sequence into a CSV formatted string. Method Name: ToCsv<T> - Parameters: 1. values ( IEnumerable<T> ): This is an extension method parameter representing the sequence of generic objects which need to be converted into CSV format. Return Value: This method returns a string representing the sequence in CSV format. Usage Example: var users = new List<User> { new User {Name = \"John\", Age = 24}, new User {Name = \"Jane\", Age = 20} }; string csvData = users.ToCsv(); Test Case: CsvTest The CsvTest class houses the test cases for the CsvEngine conversion methods. It creates a list of objects of Custom classes such as CsvModel , CsvInnerModel and AppUser . It then validates if the CSV conversion was successful for various types of fields, including nullable and complex types. [Fact] public void Test() { var value = _models.ToCsv(); Assert.NotEmpty(value); value = _users.ToCsv(); Assert.NotEmpty(value); } The test verifies if the CSV conversion works as expected by ensuring the string return from the conversion is not empty.","title":"System.Text.Csv"},{"location":"Rystem/System.Text.Csv/#documentation","text":"","title":"Documentation"},{"location":"Rystem/System.Text.Csv/#csvengine-class","text":"The CsvEngine class is an internal sealed class that helps with converting an IEnumerable<T> object into a string in CSV form.","title":"CsvEngine Class"},{"location":"Rystem/System.Text.Csv/#method-convert","text":"Convert transforms IEnumerable of T into a CSV String. Method Name: Convert<T> - Parameters: 1. values (IEnumerable ) : Sequence of any consumer-provided generic object type. Return Value: This method returns a string which represents the given Enumerable objects in CSV format. Note: \"T\" can be any class that the user wants to convert into CSV. Usage Example: // Assuming T is a class Product with fields Name (string) and Price (int) var products = new List<Product> { new Product {Name = \"Product1\", Price = 50}, new Product {Name = \"Product2\", Price = 60} }; var csv = CsvEngine.Convert(products);","title":"Method: Convert"},{"location":"Rystem/System.Text.Csv/#csvengineextensions-class","text":"The CsvEngineExtensions class is a public static class which extends the functionality of IEnumerable<T> with a function ToCsv .","title":"CsvEngineExtensions Class"},{"location":"Rystem/System.Text.Csv/#method-tocsv","text":"The ToCsv method is an extension method for IEnumerable<T> that converts the sequence into a CSV formatted string. Method Name: ToCsv<T> - Parameters: 1. values ( IEnumerable<T> ): This is an extension method parameter representing the sequence of generic objects which need to be converted into CSV format. Return Value: This method returns a string representing the sequence in CSV format. Usage Example: var users = new List<User> { new User {Name = \"John\", Age = 24}, new User {Name = \"Jane\", Age = 20} }; string csvData = users.ToCsv();","title":"Method: ToCsv"},{"location":"Rystem/System.Text.Csv/#test-case-csvtest","text":"The CsvTest class houses the test cases for the CsvEngine conversion methods. It creates a list of objects of Custom classes such as CsvModel , CsvInnerModel and AppUser . It then validates if the CSV conversion was successful for various types of fields, including nullable and complex types. [Fact] public void Test() { var value = _models.ToCsv(); Assert.NotEmpty(value); value = _users.ToCsv(); Assert.NotEmpty(value); } The test verifies if the CSV conversion works as expected by ensuring the string return from the conversion is not empty.","title":"Test Case: CsvTest"},{"location":"Rystem/System.Text.Json/","text":"Class Documentation Class: JsonExtensions This class is located in the System.Text.Json namespace and provides methods to work with JSON. This includes converting an entity to JSON and extracting an entity from a JSON representation. Method: ToJson Description : This method allows you to convert a provided entity into a JSON representation. The method utilizes the JsonSerializer class that is part of .NET's System.Text.Json library. Parameters : T entity : Specifies the entity input that you are trying to convert to a JSON representation. The entity could be of any type (T). JsonSerializerOptions? options = default : This optional parameter allows you to specify settings that configure parsing behavior when using JsonSerializer . Return Value : This method returns a string that represents the JSON representation of the input entity. Usage Example : var student = new Student(){ Name = \"John\", Age = 22 }; string studentJson = student.ToJson(); Method: FromJson (Overload 1) Description : This method allows you to convert a JSON string into a specified entity type. Parameters : string entity : The JSON string that you want to convert to an entity. JsonSerializerOptions? options = default : This optional parameter lets you specify settings for parsing JSON when using JsonSerializer . Return Value : This method returns an entity of the type (T), which was extracted from its JSON representation. Usage Example : string studentJson = \"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\"; Student student = studentJson.FromJson<Student>(); Method: FromJson (Overload 2) Description : This method converts a byte array into a specified entity type. Parameters : byte[] entity : The byte array of a JSON string that you want to convert to an entity. JsonSerializerOptions? options = default : Optional settings for parsing JSON data with JsonSerializer . Return Value : The method returns a deserialized entity of type (T) represented by the byte array. Usage Example : byte[] studentJsonBytes = Encoding.Default.GetBytes(\"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\"); Student student = studentJsonBytes.FromJson<Student>(); Method: FromJson (Overload 3) Description : This method converts a JSON string into a specific entity type known at runtime. Parameters : string entity : The JSON string to convert to an object. Type type : The System.Type of the object to convert the JSON string to. JsonSerializerOptions? options = default : Optional settings to use when parsing JSON data. Return Value : The method returns a deserialized object of the given Type . Usage Example : string studentJson = \"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\"; object student = studentJson.FromJson(typeof(Student)); Method: FromJsonAsync Description : This method asynchronously converts a Stream to a specific entity type. Parameters : Stream entity : The stream containing the JSON text to convert to an entity. JsonSerializerOptions? options = default : The Deserialize options. Return Value : The method returns an awaitable Task<T> that will result in a deserialized entity of specified type (T) upon completion. Usage Example : Stream studentJsonStream = new MemoryStream(Encoding.UTF8.GetBytes(\"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\")); Student student = await studentJsonStream.FromJsonAsync<Student>();","title":"System.Text.Json"},{"location":"Rystem/System.Text.Json/#class-documentation","text":"","title":"Class Documentation"},{"location":"Rystem/System.Text.Json/#class-jsonextensions","text":"This class is located in the System.Text.Json namespace and provides methods to work with JSON. This includes converting an entity to JSON and extracting an entity from a JSON representation.","title":"Class: JsonExtensions"},{"location":"Rystem/System.Text.Json/#method-tojson","text":"Description : This method allows you to convert a provided entity into a JSON representation. The method utilizes the JsonSerializer class that is part of .NET's System.Text.Json library. Parameters : T entity : Specifies the entity input that you are trying to convert to a JSON representation. The entity could be of any type (T). JsonSerializerOptions? options = default : This optional parameter allows you to specify settings that configure parsing behavior when using JsonSerializer . Return Value : This method returns a string that represents the JSON representation of the input entity. Usage Example : var student = new Student(){ Name = \"John\", Age = 22 }; string studentJson = student.ToJson();","title":"Method: ToJson"},{"location":"Rystem/System.Text.Json/#method-fromjson-overload-1","text":"Description : This method allows you to convert a JSON string into a specified entity type. Parameters : string entity : The JSON string that you want to convert to an entity. JsonSerializerOptions? options = default : This optional parameter lets you specify settings for parsing JSON when using JsonSerializer . Return Value : This method returns an entity of the type (T), which was extracted from its JSON representation. Usage Example : string studentJson = \"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\"; Student student = studentJson.FromJson<Student>();","title":"Method: FromJson (Overload 1)"},{"location":"Rystem/System.Text.Json/#method-fromjson-overload-2","text":"Description : This method converts a byte array into a specified entity type. Parameters : byte[] entity : The byte array of a JSON string that you want to convert to an entity. JsonSerializerOptions? options = default : Optional settings for parsing JSON data with JsonSerializer . Return Value : The method returns a deserialized entity of type (T) represented by the byte array. Usage Example : byte[] studentJsonBytes = Encoding.Default.GetBytes(\"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\"); Student student = studentJsonBytes.FromJson<Student>();","title":"Method: FromJson (Overload 2)"},{"location":"Rystem/System.Text.Json/#method-fromjson-overload-3","text":"Description : This method converts a JSON string into a specific entity type known at runtime. Parameters : string entity : The JSON string to convert to an object. Type type : The System.Type of the object to convert the JSON string to. JsonSerializerOptions? options = default : Optional settings to use when parsing JSON data. Return Value : The method returns a deserialized object of the given Type . Usage Example : string studentJson = \"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\"; object student = studentJson.FromJson(typeof(Student));","title":"Method: FromJson (Overload 3)"},{"location":"Rystem/System.Text.Json/#method-fromjsonasync","text":"Description : This method asynchronously converts a Stream to a specific entity type. Parameters : Stream entity : The stream containing the JSON text to convert to an entity. JsonSerializerOptions? options = default : The Deserialize options. Return Value : The method returns an awaitable Task<T> that will result in a deserialized entity of specified type (T) upon completion. Usage Example : Stream studentJsonStream = new MemoryStream(Encoding.UTF8.GetBytes(\"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":22}\")); Student student = await studentJsonStream.FromJsonAsync<Student>();","title":"Method: FromJsonAsync"},{"location":"Rystem/System.Text.Minimization/","text":"System.Text.Minimization This namespace consists of several classes and interfaces that principally help in the process of optimizing (minimizing) the data in certain ways, such as serialization and deserialization. Here, we will provide detailed documentation for each class and its public methods. 1. MinimizationConvertExtensions Method: ToMinimize This method minimizes the given data of generic type. Parameters : data (T) : Data of any type that needs to be minimized. startSeparator (char?) : An optional character to use as the starting separator. the default value is null. Return Value : It returns a string which is the minimized version of the input data. Usage Example : csharp var data = new List<int> {1, 2, 3}; var minimizedData = data.ToMinimize(); Method: FromMinimization This method converts a minimized string back to its original form. Parameters : value (string) : The minimized string value. startSeparator (char?) : An optional character that was used as the starting separator during minimization. the default value is null. Return Value : It returns the original form of the minimized data of type T. Usage Example : csharp var minimizedData = \"1,2,3\"; var originalData = minimizedData.FromMinimization<List<int>>(); 2. MinimizationIgnore Used to mark certain parameters to be ignored during the Minimization process. This class doesn't have any public methods defined, it's an attribute used to define how other methods behave. It's used like this: [MinimizationIgnore] public int PropertyName { get; set; } In this example, the attribute would exclude PropertyName from being minimized. 3. MinimizationPropertyAttribute Represents an attribute to mark certain properties for the Minimization process. Properties: Column The order of the column in the minimization process. Usage Example : [MinimizationPropertyAttribute(1)] public int PropertyName { get; set; } In this example, the property PropertyName would take the 1st position in the process of minimization. The internal classes ( ArraySerializer , DictionarySerializer , EnumerableSerializer , ObjectSerializer , PrimitiveSerializer , Serializer , and IMinimizationInterpreter interface) are utilized internally to perform serialization and deserialization of different data types and structures during the process of minimization. These classes are not designed for direct use outside the library. Note: The namespace also includes important attributes like MinimizationIgnore and MinimizationPropertyAttribute which are used to control how objects are minimized, down to the parameter level. Test class: MinimizationTest The test class includes two test methods Test1 and Test2 , each of which sequentially uses the extention methods ToMinimize and FromMinimization to make sure the minimized string can be correctly converted back to its original form. The tests assert that the Minimization procedures are working correctly. Usage examples from test cases: var value = s_models.ToMinimize('&'); var models2 = value.FromMinimization<List<CsvModel>>('&'); In this example, ToMinimize is used with the & character as the start separator to minimize a list of CsvModel , and FromMinimization is utilized to convert it back. var value = s_models.ToMinimize(); var models2 = value.FromMinimization<List<CsvModel>>(); In this example, ToMinimize and FromMinimization are used without specifying a start separator and the library handles the choice of separator character.","title":"System.Text.Minimization"},{"location":"Rystem/System.Text.Minimization/#systemtextminimization","text":"This namespace consists of several classes and interfaces that principally help in the process of optimizing (minimizing) the data in certain ways, such as serialization and deserialization. Here, we will provide detailed documentation for each class and its public methods.","title":"System.Text.Minimization"},{"location":"Rystem/System.Text.Minimization/#1-minimizationconvertextensions","text":"","title":"1. MinimizationConvertExtensions"},{"location":"Rystem/System.Text.Minimization/#method-tominimize","text":"This method minimizes the given data of generic type. Parameters : data (T) : Data of any type that needs to be minimized. startSeparator (char?) : An optional character to use as the starting separator. the default value is null. Return Value : It returns a string which is the minimized version of the input data. Usage Example : csharp var data = new List<int> {1, 2, 3}; var minimizedData = data.ToMinimize();","title":"Method: ToMinimize"},{"location":"Rystem/System.Text.Minimization/#method-fromminimization","text":"This method converts a minimized string back to its original form. Parameters : value (string) : The minimized string value. startSeparator (char?) : An optional character that was used as the starting separator during minimization. the default value is null. Return Value : It returns the original form of the minimized data of type T. Usage Example : csharp var minimizedData = \"1,2,3\"; var originalData = minimizedData.FromMinimization<List<int>>();","title":"Method: FromMinimization"},{"location":"Rystem/System.Text.Minimization/#2-minimizationignore","text":"Used to mark certain parameters to be ignored during the Minimization process. This class doesn't have any public methods defined, it's an attribute used to define how other methods behave. It's used like this: [MinimizationIgnore] public int PropertyName { get; set; } In this example, the attribute would exclude PropertyName from being minimized.","title":"2. MinimizationIgnore"},{"location":"Rystem/System.Text.Minimization/#3-minimizationpropertyattribute","text":"Represents an attribute to mark certain properties for the Minimization process.","title":"3. MinimizationPropertyAttribute"},{"location":"Rystem/System.Text.Minimization/#properties-column","text":"The order of the column in the minimization process.","title":"Properties: Column"},{"location":"Rystem/System.Text.Minimization/#usage-example","text":"[MinimizationPropertyAttribute(1)] public int PropertyName { get; set; } In this example, the property PropertyName would take the 1st position in the process of minimization. The internal classes ( ArraySerializer , DictionarySerializer , EnumerableSerializer , ObjectSerializer , PrimitiveSerializer , Serializer , and IMinimizationInterpreter interface) are utilized internally to perform serialization and deserialization of different data types and structures during the process of minimization. These classes are not designed for direct use outside the library. Note: The namespace also includes important attributes like MinimizationIgnore and MinimizationPropertyAttribute which are used to control how objects are minimized, down to the parameter level.","title":"Usage Example:"},{"location":"Rystem/System.Text.Minimization/#test-class-minimizationtest","text":"The test class includes two test methods Test1 and Test2 , each of which sequentially uses the extention methods ToMinimize and FromMinimization to make sure the minimized string can be correctly converted back to its original form. The tests assert that the Minimization procedures are working correctly. Usage examples from test cases: var value = s_models.ToMinimize('&'); var models2 = value.FromMinimization<List<CsvModel>>('&'); In this example, ToMinimize is used with the & character as the start separator to minimize a list of CsvModel , and FromMinimization is utilized to convert it back. var value = s_models.ToMinimize(); var models2 = value.FromMinimization<List<CsvModel>>(); In this example, ToMinimize and FromMinimization are used without specifying a start separator and the library handles the choice of separator character.","title":"Test class: MinimizationTest"},{"location":"Rystem/System.Text/","text":"Documentation of the System.Text library This documentation is for the System.Text library from the Rystem Nuget package. The classes described in this document are part of the base encoding logic that uses Fare, System.Linq.Dynamic.Core, System.Interactive and System.Interactive.Async libraries. The library provides extensions for the string type, along with extensions for various encoding and decoding. Base45Extensions Class This class provides extension methods to encode and decode data into and from Base45 format. Method Name: ToBase45 (from string value) Purpose : Converts a UTF-8 string into Base45. Parameters : value ( string ): The string to be converted into Base45. Return Value : The converted string in Base45 format (Type: string ). Usage Example : string base45Encoded = \"Hello World!\".ToBase45(); Method Name: ToBase45 (from T entity) Purpose : Converts a given object into a JSON string, then encodes it into Base45. Parameters : entity ( T ): The object to be converted into Base45. Return Value : The encoded object in Base45 format (Type: string ). Usage Example : Person person = new Person { Name = \"John Doe\", Age = 35 }; string base45Encoded = person.ToBase45(); Method Name: FromBase45 (from string encodedValue) Purpose : Decodes an encoded Base45 string back into a UTF-8 string. Parameters : encodedValue ( string ): The Base45 encoded string. Return Value : The decoded UTF-8 string (Type: string ). Usage Example : string originalValue = base45Encoded.FromBase45(); Method Name: FromBase45 (from T type) Purpose : Decodes an encoded Base45 string into a specific object type. Parameters : encodedValue ( string ): The Base45 encoded string. Return Value : The decoded object of type T (Type: T ). Usage Example : Person originalPerson = base45Encoded.FromBase45<Person>(); Base64Extensions Class This class provides extension methods to encode and decode data into and from Base64 format. Method Name: ToBase64 (from string value) Purpose : Converts a UTF-8 string into Base64. Parameters : value ( string ): The string to be converted into Base64. Return Value : The converted string in Base64 format (Type: string ). Usage Example : string base64Encoded = \"Hello World!\".ToBase64(); Method Name: ToBase64 (from T entity) Purpose : Converts a given object into a JSON string, then encodes it into Base64. Parameters : entity ( T ): The object to be converted into Base64. Return Value : The encoded object in Base64 format (Type: string ). Usage Example : Person person = new Person { Name = \"John Doe\", Age = 35 }; string base64Encoded = person.ToBase64(); Method Name: FromBase64 (from string encodedValue) Purpose : Decodes an encoded Base64 string back into a UTF-8 string. Parameters : encodedValue ( string ): The Base64 encoded string. Return Value : The decoded UTF-8 string (Type: string ). Usage Example : string originalValue = base64Encoded.FromBase64(); Method Name: FromBase64 (from T type) Purpose : Decodes an encoded Base64 string into a specific object type. Parameters : encodedValue ( string ): The Base64 encoded string. Return Value : The decoded object of type T (Type: T ). Usage Example : Person originalPerson = base64Encoded.FromBase64<Person>(); StringExtensions Class This class provides a wide range of extension methods to manipulate and convert strings, byte arrays, and data streams. For brevity, only a few key methods are documented below: Method Name: ToUpperCaseFirst Purpose : Capitalizes the first letter of a string and converts the rest into lowercase. Parameters : value ( string ): The string to be converted. Return Value : The converted string with the first letter in uppercase and the rest in lowercase (Type: string ). Usage Example : string capitalized = \"hello world!\".ToUpperCaseFirst(); Method Name: ConvertToStringAsync (from Stream entity) Purpose : Reads an entire stream asynchronously and returns its content as a UTF-8 encoded string. Parameters : entity ( Stream ): The stream to be read. Return Value : The content of the stream as a UTF-8 encoded string (Type: Task<string> ). Usage Example : string content = await stream.ConvertToStringAsync(); Method Name: ToStream (from string entity) Purpose : Converts a string into a memory stream using the UTF-8 encoding. Parameters : entity ( string ): The string to be converted into a stream. Return Value : The converted string as a memory stream (Type: Stream ). Usage Example : Stream stream = \"Hello World!\".ToStream(); Note: The full list of methods includes additional string manipulations, conversions to/from byte arrays, stream manipulations, and encoder/decoder converters for various encoding types. Refer to the provided class list for the complete method signatures. EncodingType Enum This enumeration is used in all encoding/decoding related functions in this library. It includes all the possible encodings to be used in these functions: - Default, - ASCII, - UTF8, - UTF7, - UTF32, - Latin1, - BigEndianUnicode.","title":"System.Text"},{"location":"Rystem/System.Text/#documentation-of-the-systemtext-library","text":"This documentation is for the System.Text library from the Rystem Nuget package. The classes described in this document are part of the base encoding logic that uses Fare, System.Linq.Dynamic.Core, System.Interactive and System.Interactive.Async libraries. The library provides extensions for the string type, along with extensions for various encoding and decoding.","title":"Documentation of the System.Text library"},{"location":"Rystem/System.Text/#base45extensions-class","text":"This class provides extension methods to encode and decode data into and from Base45 format.","title":"Base45Extensions Class"},{"location":"Rystem/System.Text/#method-name-tobase45-from-string-value","text":"Purpose : Converts a UTF-8 string into Base45. Parameters : value ( string ): The string to be converted into Base45. Return Value : The converted string in Base45 format (Type: string ). Usage Example : string base45Encoded = \"Hello World!\".ToBase45();","title":"Method Name: ToBase45 (from string value)"},{"location":"Rystem/System.Text/#method-name-tobase45-from-t-entity","text":"Purpose : Converts a given object into a JSON string, then encodes it into Base45. Parameters : entity ( T ): The object to be converted into Base45. Return Value : The encoded object in Base45 format (Type: string ). Usage Example : Person person = new Person { Name = \"John Doe\", Age = 35 }; string base45Encoded = person.ToBase45();","title":"Method Name: ToBase45 (from T entity)"},{"location":"Rystem/System.Text/#method-name-frombase45-from-string-encodedvalue","text":"Purpose : Decodes an encoded Base45 string back into a UTF-8 string. Parameters : encodedValue ( string ): The Base45 encoded string. Return Value : The decoded UTF-8 string (Type: string ). Usage Example : string originalValue = base45Encoded.FromBase45();","title":"Method Name: FromBase45 (from string encodedValue)"},{"location":"Rystem/System.Text/#method-name-frombase45-from-t-type","text":"Purpose : Decodes an encoded Base45 string into a specific object type. Parameters : encodedValue ( string ): The Base45 encoded string. Return Value : The decoded object of type T (Type: T ). Usage Example : Person originalPerson = base45Encoded.FromBase45<Person>();","title":"Method Name: FromBase45 (from T type)"},{"location":"Rystem/System.Text/#base64extensions-class","text":"This class provides extension methods to encode and decode data into and from Base64 format.","title":"Base64Extensions Class"},{"location":"Rystem/System.Text/#method-name-tobase64-from-string-value","text":"Purpose : Converts a UTF-8 string into Base64. Parameters : value ( string ): The string to be converted into Base64. Return Value : The converted string in Base64 format (Type: string ). Usage Example : string base64Encoded = \"Hello World!\".ToBase64();","title":"Method Name: ToBase64 (from string value)"},{"location":"Rystem/System.Text/#method-name-tobase64-from-t-entity","text":"Purpose : Converts a given object into a JSON string, then encodes it into Base64. Parameters : entity ( T ): The object to be converted into Base64. Return Value : The encoded object in Base64 format (Type: string ). Usage Example : Person person = new Person { Name = \"John Doe\", Age = 35 }; string base64Encoded = person.ToBase64();","title":"Method Name: ToBase64 (from T entity)"},{"location":"Rystem/System.Text/#method-name-frombase64-from-string-encodedvalue","text":"Purpose : Decodes an encoded Base64 string back into a UTF-8 string. Parameters : encodedValue ( string ): The Base64 encoded string. Return Value : The decoded UTF-8 string (Type: string ). Usage Example : string originalValue = base64Encoded.FromBase64();","title":"Method Name: FromBase64 (from string encodedValue)"},{"location":"Rystem/System.Text/#method-name-frombase64-from-t-type","text":"Purpose : Decodes an encoded Base64 string into a specific object type. Parameters : encodedValue ( string ): The Base64 encoded string. Return Value : The decoded object of type T (Type: T ). Usage Example : Person originalPerson = base64Encoded.FromBase64<Person>();","title":"Method Name: FromBase64 (from T type)"},{"location":"Rystem/System.Text/#stringextensions-class","text":"This class provides a wide range of extension methods to manipulate and convert strings, byte arrays, and data streams. For brevity, only a few key methods are documented below:","title":"StringExtensions Class"},{"location":"Rystem/System.Text/#method-name-touppercasefirst","text":"Purpose : Capitalizes the first letter of a string and converts the rest into lowercase. Parameters : value ( string ): The string to be converted. Return Value : The converted string with the first letter in uppercase and the rest in lowercase (Type: string ). Usage Example : string capitalized = \"hello world!\".ToUpperCaseFirst();","title":"Method Name: ToUpperCaseFirst"},{"location":"Rystem/System.Text/#method-name-converttostringasync-from-stream-entity","text":"Purpose : Reads an entire stream asynchronously and returns its content as a UTF-8 encoded string. Parameters : entity ( Stream ): The stream to be read. Return Value : The content of the stream as a UTF-8 encoded string (Type: Task<string> ). Usage Example : string content = await stream.ConvertToStringAsync();","title":"Method Name: ConvertToStringAsync (from Stream entity)"},{"location":"Rystem/System.Text/#method-name-tostream-from-string-entity","text":"Purpose : Converts a string into a memory stream using the UTF-8 encoding. Parameters : entity ( string ): The string to be converted into a stream. Return Value : The converted string as a memory stream (Type: Stream ). Usage Example : Stream stream = \"Hello World!\".ToStream(); Note: The full list of methods includes additional string manipulations, conversions to/from byte arrays, stream manipulations, and encoder/decoder converters for various encoding types. Refer to the provided class list for the complete method signatures.","title":"Method Name: ToStream (from string entity)"},{"location":"Rystem/System.Text/#encodingtype-enum","text":"This enumeration is used in all encoding/decoding related functions in this library. It includes all the possible encodings to be used in these functions: - Default, - ASCII, - UTF8, - UTF7, - UTF32, - Latin1, - BigEndianUnicode.","title":"EncodingType Enum"},{"location":"Rystem/System.Threading.Tasks/","text":"RystemTask Class Class Overview: This static class that provides configuration for task execution. Property Description WaitYourStartingThread An option to determine whether the starting thread should wait till the task has finished RystemTaskExtensions Class Class Overview: This static class provides extension methods to Task , Task<T> , ValueTask , ValueTask<T> , and IAsyncEnumerable<T> , providing properties such as NoContext and ToListAsync, amongst others. Methods: NoContext() : Method Name : NoContext Description : Ensures that the task continues on the captured context or not, depending on WaitYourStartingThread value. Parameters : None. Return Value : A ConfiguredTaskAwaitable that represents the configured task. Usage Example : // example task Task exampleTask = Task.Run(() => { ... }); exampleTask.NoContext(); ToListAsync<T>() : Method Name : ToListAsync Description : Converts an IAsyncEnumerable<T> to a ValueTask<List<T>> . Parameters : - items (IAsyncEnumerable<T>) : The async enumerable we want to convert. Return Value : A ValueTask<List<T>> that represents the list of items. Usage Example : IAsyncEnumerable<int> numbers = GetNumbers(); ValueTask<List<int>> numberList = numbers.ToListAsync(); ToResult() : Method Name : ToResult Description : Gets the result of the Task/ValueTask synchronously, and blocks the execution until the task has completed. Parameters : None. Return Value : Returns the result of the Task/ValueTask if it is of type Task<T> or ValueTask<T> , otherwise nothing. Usage Example : Task<int> exampleTask = GetNumberAsync(); int result = exampleTask.ToResult(); TaskManager Class Class Overview: This static class manages various tasks based on a specific function provided, and provides control over cancellation, concurrency and execution frequency. Methods: WhenAll() : Method Name : WhenAll Description : Executes a list of tasks concurrently and waits for all tasks to complete. Parameters : - task (Func<int, CancellationToken, Task>) : Function that generates the tasks. - times (int) : The number of times the task should be executed. - concurrentTask (int) : The max number of tasks that will be run concurrently. - runEverytimeASlotIsFree (bool) : If set to true, a new task will be started immediately when a task finishes. If false, waits till all concurrent tasks finish to start a new round. - cancellationToken (CancellationToken) : A cancellation token to cancel the tasks. Return Value : Returns a Task representing the asynchronous operation of executing all tasks. Usage Example : TaskManager.WhenAll( async (int i, CancellationToken token) => { ... }, //a task-taking function 100, // execute 100 times 10, // at most 10 concurrent tasks true, // don't wait for all tasks to finish to start new ones token // cancellation token ); WhenAtLeast() : Method Name : WhenAtLeast Description : Executes a list of tasks concurrently and waits for a minimum number of tasks to complete. Parameters : - task (Func<int, CancellationToken, Task>) : Function that generates the tasks. - times (int) : The number of times the task should be executed. - atLeast (int) : The min number of tasks that should be completed to finish. - concurrentTask (int) : The max number of tasks that will be run concurrently. - cancellationToken (CancellationToken) : A cancellation token to cancel the tasks. Return Value : Returns a Task representing the asynchronous operation of executing a minimum number of tasks. Usage Example : TaskManager.WhenAtLeast( async (int i, CancellationToken token) => { ... }, //a task-taking function 100, // execute 100 times 70, // wait for at least 70 tasks to complete 10, // at most 10 concurrent tasks token // cancellation token );","title":"System.Threading.Tasks"},{"location":"Rystem/System.Threading.Tasks/#rystemtask-class","text":"","title":"RystemTask Class"},{"location":"Rystem/System.Threading.Tasks/#class-overview","text":"This static class that provides configuration for task execution. Property Description WaitYourStartingThread An option to determine whether the starting thread should wait till the task has finished","title":"Class Overview:"},{"location":"Rystem/System.Threading.Tasks/#rystemtaskextensions-class","text":"","title":"RystemTaskExtensions Class"},{"location":"Rystem/System.Threading.Tasks/#class-overview_1","text":"This static class provides extension methods to Task , Task<T> , ValueTask , ValueTask<T> , and IAsyncEnumerable<T> , providing properties such as NoContext and ToListAsync, amongst others.","title":"Class Overview:"},{"location":"Rystem/System.Threading.Tasks/#methods","text":"","title":"Methods:"},{"location":"Rystem/System.Threading.Tasks/#nocontext","text":"Method Name : NoContext Description : Ensures that the task continues on the captured context or not, depending on WaitYourStartingThread value. Parameters : None. Return Value : A ConfiguredTaskAwaitable that represents the configured task. Usage Example : // example task Task exampleTask = Task.Run(() => { ... }); exampleTask.NoContext();","title":"NoContext():"},{"location":"Rystem/System.Threading.Tasks/#tolistasynct","text":"Method Name : ToListAsync Description : Converts an IAsyncEnumerable<T> to a ValueTask<List<T>> . Parameters : - items (IAsyncEnumerable<T>) : The async enumerable we want to convert. Return Value : A ValueTask<List<T>> that represents the list of items. Usage Example : IAsyncEnumerable<int> numbers = GetNumbers(); ValueTask<List<int>> numberList = numbers.ToListAsync();","title":"ToListAsync&lt;T&gt;():"},{"location":"Rystem/System.Threading.Tasks/#toresult","text":"Method Name : ToResult Description : Gets the result of the Task/ValueTask synchronously, and blocks the execution until the task has completed. Parameters : None. Return Value : Returns the result of the Task/ValueTask if it is of type Task<T> or ValueTask<T> , otherwise nothing. Usage Example : Task<int> exampleTask = GetNumberAsync(); int result = exampleTask.ToResult();","title":"ToResult():"},{"location":"Rystem/System.Threading.Tasks/#taskmanager-class","text":"","title":"TaskManager Class"},{"location":"Rystem/System.Threading.Tasks/#class-overview_2","text":"This static class manages various tasks based on a specific function provided, and provides control over cancellation, concurrency and execution frequency.","title":"Class Overview:"},{"location":"Rystem/System.Threading.Tasks/#methods_1","text":"","title":"Methods:"},{"location":"Rystem/System.Threading.Tasks/#whenall","text":"Method Name : WhenAll Description : Executes a list of tasks concurrently and waits for all tasks to complete. Parameters : - task (Func<int, CancellationToken, Task>) : Function that generates the tasks. - times (int) : The number of times the task should be executed. - concurrentTask (int) : The max number of tasks that will be run concurrently. - runEverytimeASlotIsFree (bool) : If set to true, a new task will be started immediately when a task finishes. If false, waits till all concurrent tasks finish to start a new round. - cancellationToken (CancellationToken) : A cancellation token to cancel the tasks. Return Value : Returns a Task representing the asynchronous operation of executing all tasks. Usage Example : TaskManager.WhenAll( async (int i, CancellationToken token) => { ... }, //a task-taking function 100, // execute 100 times 10, // at most 10 concurrent tasks true, // don't wait for all tasks to finish to start new ones token // cancellation token );","title":"WhenAll():"},{"location":"Rystem/System.Threading.Tasks/#whenatleast","text":"Method Name : WhenAtLeast Description : Executes a list of tasks concurrently and waits for a minimum number of tasks to complete. Parameters : - task (Func<int, CancellationToken, Task>) : Function that generates the tasks. - times (int) : The number of times the task should be executed. - atLeast (int) : The min number of tasks that should be completed to finish. - concurrentTask (int) : The max number of tasks that will be run concurrently. - cancellationToken (CancellationToken) : A cancellation token to cancel the tasks. Return Value : Returns a Task representing the asynchronous operation of executing a minimum number of tasks. Usage Example : TaskManager.WhenAtLeast( async (int i, CancellationToken token) => { ... }, //a task-taking function 100, // execute 100 times 70, // wait for at least 70 tasks to complete 10, // at most 10 concurrent tasks token // cancellation token );","title":"WhenAtLeast():"},{"location":"Rystem/System/","text":"Class: CastExtensions This class contains extension methods for casting a value of any given type to another specified type. The type conversions include the common primitive types and some system types. Method: Cast This method allows you to cast an object to another type. Parameters: - entity (object) : The object that needs to be cast. Return Value: The method returns a value of type T. Returns a default value if the cast isn't successful. Usage Example: string myStr = \"100\"; int myConvertedStr = myStr.Cast<int>(); Console.WriteLine(myConvertedStr); // Output: 100 Method: Cast This method allows you to cast an object to a type specified at runtime. Parameters: - entity (object) : The object that requires casting. - typeToCast (Type) : The type to which the entity needs to be cast. Return Value: The method returns an object that has been cast to typeToCast . Returns a default value if the cast fails. Usage Example: string myStr = \"100\"; Type myType = typeof(int); dynamic myConvertedStr = CastExtensions.Cast(myStr, myType); Console.WriteLine(myConvertedStr); // Output: 100 Class: CopyExtensions This class contains methods that help to deep copy an object or copy properties from one object to another object of the same type. Method: ToDeepCopy This method creates a deep copy of the source object of generic type T. Parameters: - source (T) : The object that needs to be deeply copied. Return Value: The method returns a new object with the cloned values from the provided source . Returns a default value if the object to be copied is null. Usage Example: Student student1 = new Student { Name = \"John\", Age = 20 }; Student student2 = student1.ToDeepCopy(); Method: ToDeepCopy This method creates a deep copy of the source object. Parameters: - source (object) : The object that needs to be deeply copied. Return Value: The method returns a new object with cloned values from the provided source . Returns a default value if the object to be copied is null. Usage Example: object myObject1 = new Student { Name = \"John\", Age = 20 }; object myObject2 = myObject1.ToDeepCopy(); Class: EnumExtensions This class provides extension methods for Enum and string types to convert them to specific Enum type. Method: ToEnum (for Enum types) This method converts a source Enum to another Enum type TEnum. Parameters: - source (Enum) : The source Enum which needs to be converted. Return Value: The method returns an Enum of type TEnum. Usage Example: public enum MyEnum { One = 1, Two = 2 } ... DayOfWeek day = DayOfWeek.Monday; MyEnum myEnum = day.ToEnum<MyEnum>(); // Output: MyEnum.One Class: StringExtensions This class provides methods to manipulate strings, such as replacing occurrences of a substring. Method: Replace This method replaces occurrences times of the substring oldValue with a newValue in the provided value . Parameters: - value (string) : The source string. - oldValue (string) : The substring that needs to be replaced. - newValue (string) : The new substring to replace oldValue . - occurrences (int) : The number of occurrences of oldValue that should be replaced. Return Value: The method returns a modified string with replaced values. Usage Example: string myStr = \"Hello world! Hello world!\"; string newStr = myStr.Replace(\"world\", \"universe\", 1); Console.WriteLine(newStr); // Output: \"Hello universe! Hello world!\" Class: Try This class provides methods that execute other methods and handle exceptions with the option for retry behavior. Method: WithDefaultOnCatch This method executes a function and catches any thrown exceptions. Parameters: - function (Func<T>) : The function to execute. - behavior (Action<TryBehavior>?) : This optional action defines the retry policy. Return Value: The method returns an instance of TryResponse<T> . This includes both the result of function and any exception that might have occurred. Usage Example: TryResponse<int> myTry = Try.WithDefaultOnCatch(() => { // your code that may throw exception. return 1; }); Class: Stopwatch This class provides methods to monitor the execution time of operations. Method: Monitor This method measures the execution time of an action. Parameters: - action (Action) : The action whose execution time needs to be measured. Return Value: The method returns a StopwatchResult which contains information about the start and stop time of the action's execution. Usage Example: StopwatchResult result = Stopwatch.Monitor(() => { // your code here (e.g., a lengthy operation) }); Console.WriteLine(result.Span.TotalSeconds); Class: StopwatchStart Method: Stop This method stops the stopwatch and returns the elapsed time between start and stop as a StopwatchResult instance. Return Value: The method returns an instance of StopwatchResult . Usage Example: StopwatchStart stopwatch = Stopwatch.Start(); Thread.Sleep(2000); StopwatchResult result = stopwatch.Stop(); Console.WriteLine(result.Span.TotalSeconds); // Output: 2","title":"System"},{"location":"Rystem/System/#class-castextensions","text":"This class contains extension methods for casting a value of any given type to another specified type. The type conversions include the common primitive types and some system types.","title":"Class: CastExtensions"},{"location":"Rystem/System/#method-cast","text":"This method allows you to cast an object to another type. Parameters: - entity (object) : The object that needs to be cast. Return Value: The method returns a value of type T. Returns a default value if the cast isn't successful. Usage Example: string myStr = \"100\"; int myConvertedStr = myStr.Cast<int>(); Console.WriteLine(myConvertedStr); // Output: 100","title":"Method: Cast"},{"location":"Rystem/System/#method-cast_1","text":"This method allows you to cast an object to a type specified at runtime. Parameters: - entity (object) : The object that requires casting. - typeToCast (Type) : The type to which the entity needs to be cast. Return Value: The method returns an object that has been cast to typeToCast . Returns a default value if the cast fails. Usage Example: string myStr = \"100\"; Type myType = typeof(int); dynamic myConvertedStr = CastExtensions.Cast(myStr, myType); Console.WriteLine(myConvertedStr); // Output: 100","title":"Method: Cast"},{"location":"Rystem/System/#class-copyextensions","text":"This class contains methods that help to deep copy an object or copy properties from one object to another object of the same type.","title":"Class: CopyExtensions"},{"location":"Rystem/System/#method-todeepcopy","text":"This method creates a deep copy of the source object of generic type T. Parameters: - source (T) : The object that needs to be deeply copied. Return Value: The method returns a new object with the cloned values from the provided source . Returns a default value if the object to be copied is null. Usage Example: Student student1 = new Student { Name = \"John\", Age = 20 }; Student student2 = student1.ToDeepCopy();","title":"Method: ToDeepCopy"},{"location":"Rystem/System/#method-todeepcopy_1","text":"This method creates a deep copy of the source object. Parameters: - source (object) : The object that needs to be deeply copied. Return Value: The method returns a new object with cloned values from the provided source . Returns a default value if the object to be copied is null. Usage Example: object myObject1 = new Student { Name = \"John\", Age = 20 }; object myObject2 = myObject1.ToDeepCopy();","title":"Method: ToDeepCopy"},{"location":"Rystem/System/#class-enumextensions","text":"This class provides extension methods for Enum and string types to convert them to specific Enum type.","title":"Class: EnumExtensions"},{"location":"Rystem/System/#method-toenum-for-enum-types","text":"This method converts a source Enum to another Enum type TEnum. Parameters: - source (Enum) : The source Enum which needs to be converted. Return Value: The method returns an Enum of type TEnum. Usage Example: public enum MyEnum { One = 1, Two = 2 } ... DayOfWeek day = DayOfWeek.Monday; MyEnum myEnum = day.ToEnum<MyEnum>(); // Output: MyEnum.One","title":"Method: ToEnum (for Enum types)"},{"location":"Rystem/System/#class-stringextensions","text":"This class provides methods to manipulate strings, such as replacing occurrences of a substring.","title":"Class: StringExtensions"},{"location":"Rystem/System/#method-replace","text":"This method replaces occurrences times of the substring oldValue with a newValue in the provided value . Parameters: - value (string) : The source string. - oldValue (string) : The substring that needs to be replaced. - newValue (string) : The new substring to replace oldValue . - occurrences (int) : The number of occurrences of oldValue that should be replaced. Return Value: The method returns a modified string with replaced values. Usage Example: string myStr = \"Hello world! Hello world!\"; string newStr = myStr.Replace(\"world\", \"universe\", 1); Console.WriteLine(newStr); // Output: \"Hello universe! Hello world!\"","title":"Method: Replace"},{"location":"Rystem/System/#class-try","text":"This class provides methods that execute other methods and handle exceptions with the option for retry behavior.","title":"Class: Try"},{"location":"Rystem/System/#method-withdefaultoncatch","text":"This method executes a function and catches any thrown exceptions. Parameters: - function (Func<T>) : The function to execute. - behavior (Action<TryBehavior>?) : This optional action defines the retry policy. Return Value: The method returns an instance of TryResponse<T> . This includes both the result of function and any exception that might have occurred. Usage Example: TryResponse<int> myTry = Try.WithDefaultOnCatch(() => { // your code that may throw exception. return 1; });","title":"Method: WithDefaultOnCatch"},{"location":"Rystem/System/#class-stopwatch","text":"This class provides methods to monitor the execution time of operations.","title":"Class: Stopwatch"},{"location":"Rystem/System/#method-monitor","text":"This method measures the execution time of an action. Parameters: - action (Action) : The action whose execution time needs to be measured. Return Value: The method returns a StopwatchResult which contains information about the start and stop time of the action's execution. Usage Example: StopwatchResult result = Stopwatch.Monitor(() => { // your code here (e.g., a lengthy operation) }); Console.WriteLine(result.Span.TotalSeconds);","title":"Method: Monitor"},{"location":"Rystem/System/#class-stopwatchstart","text":"","title":"Class: StopwatchStart"},{"location":"Rystem/System/#method-stop","text":"This method stops the stopwatch and returns the elapsed time between start and stop as a StopwatchResult instance. Return Value: The method returns an instance of StopwatchResult . Usage Example: StopwatchStart stopwatch = Stopwatch.Start(); Thread.Sleep(2000); StopwatchResult result = stopwatch.Stop(); Console.WriteLine(result.Span.TotalSeconds); // Output: 2","title":"Method: Stop"},{"location":"Rystem.DependencyInjection/System.Population.Random/","text":"Rystem.DependencyInjection Documentation Class: PopulationSettings This class acts as a collection of settings that influence the generation of random population data for testing or development purposes. Properties: Dictionary RegexForValueCreation : This dictionary is used to create values using regular expressions. The dictionary key corresponds to the name of a specific property on an object, and the array of strings is a set of regular expressions it can match. Dictionary > DelegatedMethodForValueCreation : This dictionary allows you to specify methods to generate values for specific properties. The key of the dictionary is the name of the property, and the value is a delegate function that returns the value for that property. Dictionary >> DelegatedMethodForValueRetrieving : If you need to retrieve a value asynchronously using an IServiceProvider, you can define a method that takes the IServiceProvider as a parameter and returns a Task . The key of this dictionary should be the name of the property for which the value is retrieved. Dictionary >>> DelegatedMethodWithRandomForValueRetrieving : Similar to DelegatedMethodForValueRetrieving , but for methods that return an IEnumerable of dynamic objects. Dictionary AutoIncrementations : This property allows for the automatic increment of certain values. The key corresponds to the property on an object, and the value is the measure of the auto-increment. Dictionary RandomValueFromRystem : This dictionary hooks up the random population generator with specific properties. The key or the dictionary is the property name, and the value is a RandomPopulationFromRystemSettings object. Dictionary ImplementationForValueCreation : This dictionary allows you to map a type to a specific property for creating a value. Dictionary ForcedNumberOfElementsForEnumerable : This dictionary lets you dictate the number of elements for an IEnumerable property. The key is the property name, and the value is the number of elements. int NumberOfElements : General number of elements be created by the population generator. Class: PopulationSettings This class simply inherits from PopulationSettings , allowing the users to define settings that are strongly typed to a specific class. Class: RandomPopulationFromRystemSettings A settings store governing decisions about the random population generated values. Properties: bool UseTheSameRandomValuesForTheSameType : If set to true, this ensures that all properties of the same type get populated with the same random value. Type StartingType : Manually specify the seed type used for generating random values. Func ? Creator : A delegate function that can be utilized to create custom random values. string? ForcedKey : Defines a forced key under which the value can be retrieved.","title":"System.Population.Random"},{"location":"Rystem.DependencyInjection/System.Population.Random/#rystemdependencyinjection-documentation","text":"","title":"Rystem.DependencyInjection Documentation"},{"location":"Rystem.DependencyInjection/System.Population.Random/#class-populationsettings","text":"This class acts as a collection of settings that influence the generation of random population data for testing or development purposes.","title":"Class: PopulationSettings"},{"location":"Rystem.DependencyInjection/System.Population.Random/#properties","text":"Dictionary RegexForValueCreation : This dictionary is used to create values using regular expressions. The dictionary key corresponds to the name of a specific property on an object, and the array of strings is a set of regular expressions it can match. Dictionary > DelegatedMethodForValueCreation : This dictionary allows you to specify methods to generate values for specific properties. The key of the dictionary is the name of the property, and the value is a delegate function that returns the value for that property. Dictionary >> DelegatedMethodForValueRetrieving : If you need to retrieve a value asynchronously using an IServiceProvider, you can define a method that takes the IServiceProvider as a parameter and returns a Task . The key of this dictionary should be the name of the property for which the value is retrieved. Dictionary >>> DelegatedMethodWithRandomForValueRetrieving : Similar to DelegatedMethodForValueRetrieving , but for methods that return an IEnumerable of dynamic objects. Dictionary AutoIncrementations : This property allows for the automatic increment of certain values. The key corresponds to the property on an object, and the value is the measure of the auto-increment. Dictionary RandomValueFromRystem : This dictionary hooks up the random population generator with specific properties. The key or the dictionary is the property name, and the value is a RandomPopulationFromRystemSettings object. Dictionary ImplementationForValueCreation : This dictionary allows you to map a type to a specific property for creating a value. Dictionary ForcedNumberOfElementsForEnumerable : This dictionary lets you dictate the number of elements for an IEnumerable property. The key is the property name, and the value is the number of elements. int NumberOfElements : General number of elements be created by the population generator.","title":"Properties:"},{"location":"Rystem.DependencyInjection/System.Population.Random/#class-populationsettings_1","text":"This class simply inherits from PopulationSettings , allowing the users to define settings that are strongly typed to a specific class.","title":"Class: PopulationSettings"},{"location":"Rystem.DependencyInjection/System.Population.Random/#class-randompopulationfromrystemsettings","text":"A settings store governing decisions about the random population generated values.","title":"Class: RandomPopulationFromRystemSettings"},{"location":"Rystem.DependencyInjection/System.Population.Random/#properties_1","text":"bool UseTheSameRandomValuesForTheSameType : If set to true, this ensures that all properties of the same type get populated with the same random value. Type StartingType : Manually specify the seed type used for generating random values. Func ? Creator : A delegate function that can be utilized to create custom random values. string? ForcedKey : Defines a forced key under which the value can be retrieved.","title":"Properties:"},{"location":"Rystem.RepositoryFramework.Abstractions/Microsoft.Extensions.DependencyInjection/","text":"Class Documentation Namespace: Microsoft.Extensions.DependencyInjection This namespace contains extensions methods for an IServiceCollection to add repositories, commands and queries into the service dependency injection container with various other features. The classes here provide abstraction to functionality encapsulated by RepositoryFramework. ServiceCollectionExtensions This class features methods that add Repositories, Commands, Queries and repository-related business into Microsoft's dependency injection container. These methods also provide the implementation for setting up the repository's settings, builder reference and custom separators for parsing default keys. Method Name: AddDefaultSeparatorForDefaultKeyInterface This method sets the default separator for the IDefaultKey interface. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the service is being added. - separator (string): The separator string that will replace the default separator. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddDefaultSeparatorForDefaultKeyInterface(\"|\"); Method Name: AddRepository This method adds a repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the repository is being added. - builder (Action >): The builder to setup the repository. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddRepository<User, int>((builder) => { builder.SetStorageType(StorageType.Cloud) }); Method Name: AddCommand This method adds a command repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the command is being added. - builder (Action >): The builder to setup the command repository. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddCommand<Order, Guid>((builder) => { builder.SetStorageType(StorageType.Local) }); Method Name: AddQuery This method adds a Query repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the Query repository is being added. - builder (Action >): The builder to set up the Query repository. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddQuery<Order, Guid>((builder) => { builder.SetStorageType(StorageType.Local) }); Method Name: ScanBusinessForRepositoryFramework This method adds all business classes from the specified assemblies for the repository or CQRS pattern to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the classes are being added. - assemblies (Assembly[]): The assemblies where the business classes reside. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.ScanBusinessForRepositoryFramework(typeof(SomeBusiness).Assembly); Method Name: AddBusinessForRepository This method adds a business repository for the specified model to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the business repository is being added. Return Value: It returns a new instance of RepositoryBusinessBuilder for the supplied type and key parameters. Usage Example: services.AddBusinessForRepository<Product, Guid>() Method Name: AddRepositoryAsync This method asynchronously adds a repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the repository is being added. - builder (Func , ValueTask>): The builder to setup the repository asynchronously. Return Value: It returns a Task of IServiceCollection which represents the asynchronous operation. Usage Example: await services.AddRepositoryAsync<User, int>(async (builder) => { await builder.SetStorageTypeAsync(StorageType.Cloud) }); Method Name: AddCommandAsync This method asynchronously adds a command repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the command is being added. - builder (Func , ValueTask>): The builder to setup the command repository asynchronously. Return Value: It returns a Task of IServiceCollection which represents the asynchronous operation. Usage Example: await services.AddCommandAsync<Order, Guid>(async (builder) => { await builder.SetStorageTypeAsync(StorageType.Local) }); Method Name: AddQueryAsync This method asynchronously adds a Query repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the Query repository is being added. - builder (Func , ValueTask>): The builder to setup the Query repository asynchronously. Return Value: It returns a Task of IServiceCollection which represents the asynchronous operation. Usage Example: await services.AddQueryAsync<Order, Guid>(async (builder) => { await builder.SetStorageTypeAsync(StorageType.Local) });","title":"Microsoft.Extensions.DependencyInjection"},{"location":"Rystem.RepositoryFramework.Abstractions/Microsoft.Extensions.DependencyInjection/#class-documentation","text":"","title":"Class Documentation"},{"location":"Rystem.RepositoryFramework.Abstractions/Microsoft.Extensions.DependencyInjection/#namespace-microsoftextensionsdependencyinjection","text":"This namespace contains extensions methods for an IServiceCollection to add repositories, commands and queries into the service dependency injection container with various other features. The classes here provide abstraction to functionality encapsulated by RepositoryFramework.","title":"Namespace: Microsoft.Extensions.DependencyInjection"},{"location":"Rystem.RepositoryFramework.Abstractions/Microsoft.Extensions.DependencyInjection/#servicecollectionextensions","text":"This class features methods that add Repositories, Commands, Queries and repository-related business into Microsoft's dependency injection container. These methods also provide the implementation for setting up the repository's settings, builder reference and custom separators for parsing default keys. Method Name: AddDefaultSeparatorForDefaultKeyInterface This method sets the default separator for the IDefaultKey interface. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the service is being added. - separator (string): The separator string that will replace the default separator. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddDefaultSeparatorForDefaultKeyInterface(\"|\"); Method Name: AddRepository This method adds a repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the repository is being added. - builder (Action >): The builder to setup the repository. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddRepository<User, int>((builder) => { builder.SetStorageType(StorageType.Cloud) }); Method Name: AddCommand This method adds a command repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the command is being added. - builder (Action >): The builder to setup the command repository. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddCommand<Order, Guid>((builder) => { builder.SetStorageType(StorageType.Local) }); Method Name: AddQuery This method adds a Query repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the Query repository is being added. - builder (Action >): The builder to set up the Query repository. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.AddQuery<Order, Guid>((builder) => { builder.SetStorageType(StorageType.Local) }); Method Name: ScanBusinessForRepositoryFramework This method adds all business classes from the specified assemblies for the repository or CQRS pattern to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the classes are being added. - assemblies (Assembly[]): The assemblies where the business classes reside. Return Value: It returns the same IServiceCollection instance which allows for fluent method chaining. Usage Example: services.ScanBusinessForRepositoryFramework(typeof(SomeBusiness).Assembly); Method Name: AddBusinessForRepository This method adds a business repository for the specified model to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the business repository is being added. Return Value: It returns a new instance of RepositoryBusinessBuilder for the supplied type and key parameters. Usage Example: services.AddBusinessForRepository<Product, Guid>() Method Name: AddRepositoryAsync This method asynchronously adds a repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the repository is being added. - builder (Func , ValueTask>): The builder to setup the repository asynchronously. Return Value: It returns a Task of IServiceCollection which represents the asynchronous operation. Usage Example: await services.AddRepositoryAsync<User, int>(async (builder) => { await builder.SetStorageTypeAsync(StorageType.Cloud) }); Method Name: AddCommandAsync This method asynchronously adds a command repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the command is being added. - builder (Func , ValueTask>): The builder to setup the command repository asynchronously. Return Value: It returns a Task of IServiceCollection which represents the asynchronous operation. Usage Example: await services.AddCommandAsync<Order, Guid>(async (builder) => { await builder.SetStorageTypeAsync(StorageType.Local) }); Method Name: AddQueryAsync This method asynchronously adds a Query repository to the IServiceCollection. Parameters: - services (IServiceCollection): The IServiceCollection instance to which the Query repository is being added. - builder (Func , ValueTask>): The builder to setup the Query repository asynchronously. Return Value: It returns a Task of IServiceCollection which represents the asynchronous operation. Usage Example: await services.AddQueryAsync<Order, Guid>(async (builder) => { await builder.SetStorageTypeAsync(StorageType.Local) });","title":"ServiceCollectionExtensions"},{"location":"Rystem.RepositoryFramework.Abstractions/System.Linq/","text":"QueryPatternExtensions Class Documentation This class extends the functionality of the IQueryPattern interface, providing a collection of utility methods to perform common querying operations on repositories. Method Details QueryAsync() Description : This method is used to fetch all elements from a repository. Parameters : entity : This is an instance of IQueryPattern that represents your repository. cancellationToken : This optional parameter is used to optionally cancel the operation. Return Value : This method returns an IAsyncEnumerable object that contains all elements of your repository. Usage Example : // Assuming repository implements IQueryPattern interface var allElements = repository.QueryAsync(); ToListAsEntityAsync() Description : This method is used to fetch all elements from a repository and return them as a list. Parameters : entity : This is an instance of IQueryPattern that represents your repository. cancellationToken : This optional parameter is used to optionally cancel the operation. Return Value : This method returns a ValueTask that results in a List of all elements in your repository. Usage Example : // Assuming repository implements IQueryPattern interface var allElementsList = await repository.ToListAsEntityAsync(); QueryAsEntityAsync() Description : This method is used to fetch all elements from a repository and return them as IAsyncEnumerable . Parameters : entity : This is an instance of IQueryPattern that represents your repository. cancellationToken : This optional parameter is used to optionally cancel the operation. Return Value : This method returns an IAsyncEnumerable object that contains all elements of your repository. Usage Example : // Assuming repository implements IQueryPattern interface var asyncElements = repository.QueryAsEntityAsync(); AsQueryBuilder() Description : This method is used to create a QueryBuilder instance for your repository which can then be used to build complex queries. Parameters : entity : This is an instance of IQueryPattern that represents your repository. Return Value : This method returns a QueryBuilder instance for the specified repository. Usage Example : // Assuming repository implements IQueryPattern interface var queryBuilder = repository.AsQueryBuilder(); For the remaining methods, see the following pattern: Where() , Take() , Skip() , OrderBy() , and OrderByDescending() are used to construct advanced queries. GroupByAsync() , AnyAsync() , FirstOrDefaultAsync() , FirstAsync() , PageAsync() , SumAsync() , AverageAsync() , MaxAsync() , MinAsync() , and ToListAsync() fetch data from the repository based on the query parameters, ranging from counting the total elements to performing aggregate operations like sums and averages. The parameters include the repository entity, an expression representing the query or property to operate on, the number of elements to take or skip, the cancellation token, etc., depending on the method. The methods return an asynchronous task-based result containing the fetched or computed data, which could be a simple boolean, a single element, a list of elements, a count, or an aggregate value. Use them as follows: // Assuming repository implements IQueryPattern interface var selectedElements = await repository.Where(x => x.Property > 100).ToListAsync(); var totalElements = await repository.CountAsync(); var sumOfElementsProperty = await repository.SumAsync(x => x.Property); The above example filters elements based on a property, counts total elements, and calculates a sum. In this way, these methods can be combined to create powerful and flexible queries for data retrieval.","title":"System.Linq"},{"location":"Rystem.RepositoryFramework.Abstractions/System.Linq/#querypatternextensions-class-documentation","text":"This class extends the functionality of the IQueryPattern interface, providing a collection of utility methods to perform common querying operations on repositories.","title":"QueryPatternExtensions Class Documentation"},{"location":"Rystem.RepositoryFramework.Abstractions/System.Linq/#method-details","text":"","title":"Method Details"},{"location":"Rystem.RepositoryFramework.Abstractions/System.Linq/#queryasync","text":"Description : This method is used to fetch all elements from a repository. Parameters : entity : This is an instance of IQueryPattern that represents your repository. cancellationToken : This optional parameter is used to optionally cancel the operation. Return Value : This method returns an IAsyncEnumerable object that contains all elements of your repository. Usage Example : // Assuming repository implements IQueryPattern interface var allElements = repository.QueryAsync();","title":"QueryAsync()"},{"location":"Rystem.RepositoryFramework.Abstractions/System.Linq/#tolistasentityasync","text":"Description : This method is used to fetch all elements from a repository and return them as a list. Parameters : entity : This is an instance of IQueryPattern that represents your repository. cancellationToken : This optional parameter is used to optionally cancel the operation. Return Value : This method returns a ValueTask that results in a List of all elements in your repository. Usage Example : // Assuming repository implements IQueryPattern interface var allElementsList = await repository.ToListAsEntityAsync();","title":"ToListAsEntityAsync()"},{"location":"Rystem.RepositoryFramework.Abstractions/System.Linq/#queryasentityasync","text":"Description : This method is used to fetch all elements from a repository and return them as IAsyncEnumerable . Parameters : entity : This is an instance of IQueryPattern that represents your repository. cancellationToken : This optional parameter is used to optionally cancel the operation. Return Value : This method returns an IAsyncEnumerable object that contains all elements of your repository. Usage Example : // Assuming repository implements IQueryPattern interface var asyncElements = repository.QueryAsEntityAsync();","title":"QueryAsEntityAsync()"},{"location":"Rystem.RepositoryFramework.Abstractions/System.Linq/#asquerybuilder","text":"Description : This method is used to create a QueryBuilder instance for your repository which can then be used to build complex queries. Parameters : entity : This is an instance of IQueryPattern that represents your repository. Return Value : This method returns a QueryBuilder instance for the specified repository. Usage Example : // Assuming repository implements IQueryPattern interface var queryBuilder = repository.AsQueryBuilder(); For the remaining methods, see the following pattern: Where() , Take() , Skip() , OrderBy() , and OrderByDescending() are used to construct advanced queries. GroupByAsync() , AnyAsync() , FirstOrDefaultAsync() , FirstAsync() , PageAsync() , SumAsync() , AverageAsync() , MaxAsync() , MinAsync() , and ToListAsync() fetch data from the repository based on the query parameters, ranging from counting the total elements to performing aggregate operations like sums and averages. The parameters include the repository entity, an expression representing the query or property to operate on, the number of elements to take or skip, the cancellation token, etc., depending on the method. The methods return an asynchronous task-based result containing the fetched or computed data, which could be a simple boolean, a single element, a list of elements, a count, or an aggregate value. Use them as follows: // Assuming repository implements IQueryPattern interface var selectedElements = await repository.Where(x => x.Property > 100).ToListAsync(); var totalElements = await repository.CountAsync(); var sumOfElementsProperty = await repository.SumAsync(x => x.Property); The above example filters elements based on a property, counts total elements, and calculates a sum. In this way, these methods can be combined to create powerful and flexible queries for data retrieval.","title":"AsQueryBuilder()"}]}